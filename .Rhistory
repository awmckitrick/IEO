par(mfrow=c(1, 2), mar=c(4, 5, 3, 1))
for (i in 1:2) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=2)
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(2, 5), mar=c(4, 5, 3, 1))
for (i in 1:10) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=2)
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(2, 5), mar=c(4, 5, 3, 1))
for (i in 1:10) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=2)
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(2, 5))
for (i in 1:10) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=2)
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(2, 5))
for (i in 1:10) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=2)
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(5, 2))
for (i in 1:10) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=2)
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow = c(1,1), mar = c(5.1,4.1,4.1,2.1))
par(mfrow=c(5, 2), mar = c(5.1,4.1,4.1,2.1))
for (i in 1:10) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=2)
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(5, 2), mar = c(1,1,1,1))
for (i in 1:10) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=2)
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(5, 3), mar = c(1,1,1,1))
for (i in 1:15) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=2)
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(5, 3), mar = c(2,2,2,2))
for (i in 1:15) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=0.5)
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(5, 3), mar = c(2,2,2,2))
for (i in 1:15) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=1)
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(5, 4), mar = c(2,2,2,2))
for (i in 1:20) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=1)
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
for (i in 1:20) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=1,col = "red")
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(5, 4), mar = c(2,2,2,2))
for (i in 1:20) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=1,colramp = "red")
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(5, 4), mar = c(2,2,2,2))
for (i in 1:20) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=1,colramp = 1)
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(5, 4), mar = c(2,2,2,2))
for (i in 1:20) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=1,colramp = colorRampPalette(c("red","green"),space = "Lab"))
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(5, 4), mar = c(2,2,2,2))
for (i in 1:20) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=1,colramp = colorRampPalette(c("white","red"),space = "Lab"))
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
A
M
assays(se.filt$type)[,i]
se.filt$type[,i]
se.filt$type
se.filt$type[i]
factor(se.filt$type[i])
names(se.filt$type[i])
values(se.filt$type[i])
levels(se.filt$type[i])
level(se.filt$type[i])
get(se.filt$type[i])
get(se.filt$type[i])[[1]]
se.filt$type[[i]]
par(mfrow=c(5, 4), mar = c(2,2,2,2))
for (i in 1:20) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A; C <- se.filt$type[[i]]
smoothScatter(A, M,
main=colnames(se.filt)[i],
las=1,
cex.axis=1.2,
cex.lab=1.5,
cex.main=1,
colramp = colorRampPalette(c("white",ifelse(C == "tumor", "blue","green")),space = "Lab")
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
## MDS
par(mfrow = c(1,1), mar = c(5.1,4.1,4.1,2.1))
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7)
par(mfrow=c(5, 4), mar = c(2,2,2,2))
for (i in 1:20) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A; C <- se.filt$type[[i]];
smoothScatter(A, M,
print(C)
main=colnames(se.filt)[i],
las=1,
cex.axis=1.2,
cex.lab=1.5,
cex.main=1,
colramp = colorRampPalette(c("white",ifelse(C == "tumor", "blue","green")),space = "Lab"))
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(5, 4), mar = c(2,2,2,2))
for (i in 1:20) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A; C <- se.filt$type[[i]];
print(C)
smoothScatter(A, M,
main=colnames(se.filt)[i],
las=1,
cex.axis=1.2,
cex.lab=1.5,
cex.main=1,
colramp = colorRampPalette(c("white",ifelse(C == "tumor", "blue","green")),space = "Lab"))
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(5, 4), mar = c(2,2,2,2))
for (i in 580:600) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A; C <- se.filt$type[[i]];
print(C)
smoothScatter(A, M,
main=colnames(se.filt)[i],
las=1,
cex.axis=1.2,
cex.lab=1.5,
cex.main=1,
colramp = colorRampPalette(c("white",ifelse(C == "tumor", "cyan","green")),space = "Lab"))
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
for (i in 581:600) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A; C <- se.filt$type[[i]];
print(C)
smoothScatter(A, M,
main=colnames(se.filt)[i],
las=1,
cex.axis=1.2,
cex.lab=1.5,
cex.main=1,
colramp = colorRampPalette(c("white",ifelse(C == "tumor", "cyan","green")),space = "Lab"))
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
for (i in 582:600) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A; C <- se.filt$type[[i]];
print(C)
smoothScatter(A, M,
main=colnames(se.filt)[i],
las=1,
cex.axis=1.2,
cex.lab=1.5,
cex.main=1,
colramp = colorRampPalette(c("white",ifelse(C == "tumor", "cyan","green")),space = "Lab"))
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(5, 4), mar = c(2,2,2,2))
for (i in 581:600) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A; C <- se.filt$type[[i]];
print(C)
smoothScatter(A, M,
main=colnames(se.filt)[i],
las=1,
cex.axis=1.2,
cex.lab=1.5,
cex.main=1,
colramp = colorRampPalette(c("white",ifelse(C == "tumor", "cyan","green")),space = "Lab"))
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(5, 4), mar = c(2,2,2,2))
for (i in c(1,581)) {
inici <- i
final <- i+19
for (i in inici:final) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A; C <- se.filt$type[[i]];
print(C)
smoothScatter(A, M,
main=colnames(se.filt)[i],
las=1,
cex.axis=1.2,
cex.lab=1.5,
cex.main=1,
colramp = colorRampPalette(c("white",ifelse(C == "tumor", "cyan","green")),space = "Lab"))
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
}
assays(se)
assays(se)$counts
colData(se)
se$plate
tss <- substr(colnames(se.filt), 6, 7)
table(tss)
plate <- substr(colnames(se.filt), 22, 25)
tabl
plate <- substr(colnames(se.filt), 22, 25)
table(plate)
portionanalyte <- substr(colnames(se.filt), 18, 20)
table(portionanalyte)
samplevial <- substr(colnames(se.filt), 14, 16)
table(samplevial)
center <- substr(colnames(se.filt), 27, 28)
table(center)
hist(plate)
table(data.frame(TYPE=se.filt$type, TSS=tss))
table(data.frame(TYPE=se.filt$type, PLATE=plate))
table(data.frame(TYPE=se.filt$type, PORTIONALYTE=portionanalyte))
table(data.frame(TYPE=se.filt$type, SAMPLEVIAL=samplevial))
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(tss))
sampleDendrogram <- as.dendrogram(sampleClustering, hang=0.1)
names(batch) <- colnames(se.filt)
outcome <- paste(substr(colnames(se.filt), 9, 12), as.character(se.filt$type), sep="-")
names(outcome) <- colnames(se.filt)
sampleDendrogram <- dendrapply(sampleDendrogram,
function(x, batch, labels) {
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col=as.vector(batch[attr(x, "label")]))
attr(x, "label") <- as.vector(labels[attr(x, "label")])
}
x
}, batch, outcome)
plot(sampleDendrogram, main="Hierarchical clustering of samples")
legend("topright", paste("Batch", sort(unique(batch)), levels(factor(tss))), fill=sort(unique(batch)))
par(c(1,1))
sampleDendrogram <- dendrapply(sampleDendrogram,
function(x, batch, labels) {
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col=as.vector(batch[attr(x, "label")]))
attr(x, "label") <- as.vector(labels[attr(x, "label")])
}
x
}, batch, outcome)
par(c(1,1))
par(c(1,1))
par(mfrow = c(1,1))
sampleDendrogram <- dendrapply(sampleDendrogram,
function(x, batch, labels) {
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col=as.vector(batch[attr(x, "label")]))
attr(x, "label") <- as.vector(labels[attr(x, "label")])
}
x
}, batch, outcome)
plot(sampleDendrogram, main="Hierarchical clustering of samples")
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(tss))
sampleDendrogram <- as.dendrogram(sampleClustering, hang=0.1)
names(batch) <- colnames(se.filt)
outcome <- paste(substr(colnames(se.filt), 9, 12), as.character(se.filt$type), sep="-")
names(outcome) <- colnames(se.filt)
par(mfrow = c(1,1))
sampleDendrogram <- dendrapply(sampleDendrogram,
function(x, batch, labels) {
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col=as.vector(batch[attr(x, "label")]))
attr(x, "label") <- as.vector(labels[attr(x, "label")])
}
x
}, batch, outcome)
plot(sampleDendrogram, main="Hierarchical clustering of samples")
legend("topright", paste("Batch", sort(unique(batch)), levels(factor(tss))), fill=sort(unique(batch)))
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(tss))
sampleDendrogram <- as.dendrogram(sampleClustering, hang=0.1)
names(batch) <- colnames(se.filt)
outcome <- paste(substr(colnames(se.filt), 9, 12), as.character(se.filt$type), sep="-")
names(outcome) <- colnames(se.filt)
par(mfrow = c(1,1))
sampleDendrogram <- dendrapply(sampleDendrogram,
function(x, batch, labels) {
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col=as.vector(batch[attr(x, "label")]))
attr(x, "label") <- as.vector(labels[attr(x, "label")])
}
x
}, batch, outcome)
plot(sampleDendrogram, main="Hierarchical clustering of samples")
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(plate))
sampleDendrogram <- as.dendrogram(sampleClustering, hang=0.1)
names(batch) <- colnames(se.filt)
outcome <- paste(substr(colnames(se.filt), 9, 12), as.character(se.filt$type), sep="-")
names(outcome) <- colnames(se.filt)
par(mfrow = c(1,1))
sampleDendrogram <- dendrapply(sampleDendrogram,
function(x, batch, labels) {
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col=as.vector(batch[attr(x, "label")]))
attr(x, "label") <- as.vector(labels[attr(x, "label")])
}
x
}, batch, outcome)
plot(sampleDendrogram, main="Hierarchical clustering of samples")
plotMDS(dge.filt, labels=outcome, col=batch)
legend("bottomleft", paste("Batch", sort(unique(batch)), levels(factor(tss))),
fill=sort(unique(batch)), inset=0.05)
plotMDS(dge.filt, labels=outcome, col=batch)
plotMDS(dge_luad.filt, labels=outcome, col=batch)
legend("bottomleft", paste("Batch", sort(unique(batch)), levels(factor(plate))),
fill=sort(unique(batch)), inset=0.05)
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(tss))
plotMDS(dge_luad.filt, labels=outcome, col=batch)
legend("bottomleft", paste("Batch", sort(unique(batch)), levels(factor(tss))),
fill=sort(unique(batch)), inset=0.05)
table(data.frame(TYPE=se.filt$type, GENDER=se.filt$gender))
table(data.frame(TYPE=se.filt$type, GENDER=se.filt$tumor_type))
table(data.frame(TYPE=se.filt$type, GENDER=se.filt$race))
table(data.frame(TYPE=se.filt$type, GENDER=se.filt$history_other_malignancy))
table(data.frame(TYPE=se.filt$type, GENDER=se.filt$tobacco_smoking_history_indicator))
table(data.frame(TYPE=se.filt$type, GENDER=se.filt$kras_gene_analysis_indicator))
substr(colnames(se.filt), 14, 16)
colnames(se.filt$gender)
se.filt$gender
names(se.filt$gender)
values(se.filt$gender)
factors(se.filt$gender)
levels(se.filt$gender)
gender <- (se.filt$gender)
gender
(se.filt$gender)[[]]
se.filt$gender[[]]
se.filt$gender[]
se.filt$gender[,]
se.filt$gender[,]
se.filt$gender[[]]
se.filt$gender[[1]]
se.filt$gender[[,1]]
se.filt$gender[[*]]
se.filt$gender[[,]]
se.filt$gender[[1:600]]
se.filt$gender
mylist[se.filt$gender]
[se.filt$gender]
se.filt$gender[[c(1:600)]]
se.filt$gender[c(1:600)]
se.filt$gender[1:600]
se.filt$gender[[1:600]]
get(se.filt$gender)
mget(se.filt$gender)
attributes(se.filt$gender)
colData(se.filt$gender)
colData(se.filt)
colData(se.filt)$gender
attributes(colData(se.filt)$gender)
tss
str(colData(se.filt)$gender)
unclass(colData(se.filt)$gender)
attributes(unclass(colData(se.filt)$gender))
type(se.filt)
se.filt$gender
se.filt$gender[[1]]
se.filt$gender[[1,1]]
se.filt$gender[[1,2]]
se.filt$gender[[c(1,2)]]
se.filt$gender[c(1,2)]
se.filt$gender[c(1:2)]
se.filt$gender[c(1:600)]
se.filt$gender[1,1]
se.filt$gender[1]
se.filt$gender[2]
level(se.filt$gender[2])
name(se.filt$gender[2])
names(se.filt$gender[2])
values(se.filt$gender[2])
get(se.filt$gender[2])
[(se.filt$gender[2])]
factor(se.filt$gender[2])
krosis <- factor(se.filt$gender[2])
krosis
attributes(se.filt$gender[2])
getExportedValue(se.filt$gender)
getExportedValue(se.filt$gender[2])
unname(se.filt$gender)
tss
gender <- unname(se.filt$gender)
table(data.frame(TYPE=se.filt$type, GENDER=gender))
table(samplevial)
table(gender)
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(gender))
plotMDS(dge_luad.filt, labels=outcome, col=batch)
race <- unname(se.filt$race)
table(race)
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(race))
plotMDS(dge_luad.filt, labels=outcome, col=batch)
kras <- unname(se.filt$kras_mutation_found)
unname(se.filt$gender)
kras
table(kras)
gender <- unname(se.filt$gender)
gender
for (a in c(tss, plate, portionanalyte, gender,race)){
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor([a]))
plotMDS(dge_luad.filt, labels=outcome, col=batch)
legend("bottomleft", paste("Batch", sort(unique(batch)), levels(factor(tss))),
fill=sort(unique(batch)), inset=0.05)
}
for (a in c(tss, plate, portionanalyte, gender,race)){
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(a))
plotMDS(dge_luad.filt, labels=outcome, col=batch)
legend("bottomleft", paste("Batch", sort(unique(batch)), levels(factor(tss))),
fill=sort(unique(batch)), inset=0.05)
}
a
for (a in c(tss, plate, portionanalyte, gender,race)){
print(a)
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(a))
plotMDS(dge_luad.filt, labels=outcome, col=batch)
#  legend("bottomleft", paste("Batch", sort(unique(batch)), levels(factor(tss))),
#        fill=sort(unique(batch)), inset=0.05)
}
tss
for (a in list(tss, plate, portionanalyte, gender,race)){
print(a)
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(a))
plotMDS(dge_luad.filt, labels=outcome, col=batch)
#  legend("bottomleft", paste("Batch", sort(unique(batch)), levels(factor(tss))),
#        fill=sort(unique(batch)), inset=0.05)
}
titles_batchs <- c("MDS plot: Tisue Source Site",
"MDS plot: Plate",
"MDS plot: Sex",
"MDS plot: Race")
for (a in 1:4){
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(objects_batchs[[a]]))
plotMDS(dge_luad.filt, labels=outcome, col=batch, main =titles_batchs[a])
#  legend("bottomleft", paste("Batch", sort(unique(batch)), levels(factor(a))),
#        fill=sort(unique(batch)), inset=0.05)
}
titles_batchs <- c("MDS plot: Tisue Source Site",
"MDS plot: Plate",
"MDS plot: Sex",
"MDS plot: Ethnicity")
objects_batchs <- list(tss, plate, gender,race)
for (a in 1:4){
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(objects_batchs[[a]]))
plotMDS(dge_luad.filt, labels=outcome, col=batch, main =titles_batchs[a])
#  legend("bottomleft", paste("Batch", sort(unique(batch)), levels(factor(a))),
#        fill=sort(unique(batch)), inset=0.05)
}
