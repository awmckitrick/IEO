library(SummarizedExperiment)
library(ggplot2)
se <- readRDS( "seLUAD.rds")
se
dge <- DGEList(counts = assays(se)$counts, genes = as.data.frame(rowData(se)))
ord <- order(dge$sample$lib.size)
barplot(dge$sample$lib.size[ord]/1e+06, las = 1, ylab = "Millions of reads", xlab = "Samples",
col = ifelse(se$gender == "female","red","blue"))
legend("topleft", c("female", "male"), fill = c("red", "blue"), inset = 0.01)
prevnumber <- 0
ordsliced <- List(0)
CPM <- t(t(dge$counts)/(dge$samples$lib.size/1e+06))
assays(se)$logCPM <- cpm(dge, log = TRUE, prior.count = 0.25)
assays(se)$logCPM[1:3, 1:7]
CPM <- t(t(dge$counts)/(dge$samples$lib.size/1e+06))
dge <- DGEList(counts = assays(se)$counts, genes = as.data.frame(rowData(se)))
library(edgeR)
dge <- DGEList(counts = assays(se)$counts, genes = as.data.frame(rowData(se)))
CPM <- t(t(dge$counts)/(dge$samples$lib.size/1e+06))
assays(se)$logCPM <- cpm(dge, log = TRUE, prior.count = 0.25)
assays(se)$logCPM[1:3, 1:7]
library(geneplotter)
multidensity(assays(se)$logCPM, xlab = "log2 CPM", legend = NULL,
main = "", cex.axis = 1.2, cex.lab = 1.5, las = 1)
library(SummarizedExperiment)
lclse <- readRDS("pickrell2010.rds")
#Argument counts is an assay matrix, genes is a data-frame with all info from the row section
require("edgeR")
dge <- DGEList(counts = assays(lclse)$counts, genes = as.data.frame(rowData(lclse)))
#To load data
lclse <- readRDS("./pickrell2010.rds")
dge <- DGEList(counts = assays(lclse)$counts, genes = as.data.frame(rowData(lclse)))
ord <- order(dge$sample$lib.size)
barplot(dge$sample$lib.size[ord]/1e+06, las = 1, ylab = "Millions of reads", xlab = "Samples",
col = ifelse(lclse$gender == "female","red","blue"))
legend("topleft", c("female", "male"), fill = c("red", "blue"), inset = 0.01)
#t means transpose
CPM <- t(t(dge$counts)/(dge$samples$lib.size/1e+06))
assays(lclse)$logCPM <- cpm(dge, log = TRUE, prior.count = 0.25)
assays(lclse)$logCPM[1:3, 1:7]
#Add logcpm to experiment
assays(lclse)$logCPM <- cpm(dge, log = TRUE, prior.count = 0.25)
assays(lclse)$logCPM[1:3, 1:7]
#CPM vs logCPM plot across samples
library(geneplotter)
par(mfrow = c(1, 2), mar = c(4, 5, 1, 1))
multidensity(as.list(as.data.frame(CPM)), xlab = "CPM", legend = NULL, main = "",
cex.axis = 1.2, cex.lab = 1.5, las = 1)
multidensity(as.list(as.data.frame(assays(lclse)$logCPM)), xlab = "log2 CPM", legend = NULL,
main = "", cex.axis = 1.2, cex.lab = 1.5, las = 1)
avgexp <- rowMeans(assays(lclse)$logCPM)
hist(avgexp, xlab = expression(log[2] * "CPM"), main = "", las = 1, col = "gray")
abline(v = 0, col = "red", lwd = 2)
avgexp <- rowMeans(assays(se)$logCPM)
avgexp <- rowMeans(assays(se)$logCPM)
avgexp <- rowMeans(assays(se)$logCPM)
se
avgexp <- rowMeans(assays(se)$logCPM)
hist(avgexp, xlab = expression(log[2] * "CPM"), main = "", las = 1, col = "gray")
abline(v = 0, col = "red", lwd = 2)
avgexp <- rowMeans(assays(se)$logCPM)
hist(avgexp, xlab = expression(log[2] * "CPM"), main = "", las = 1, col = "gray")
abline(v = 0, col = "red", lwd = 2)
hist(avgexp, xlab = expression(log[2] * "CPM"), main = "", las = 1, col = "gray")
avgexp <- rowMeans(assays(se)$logCPM)
hist(avgexp, xlab = expression(log[2] * "CPM"), main = "", las = 1, col = "gray")
abline(v = 0, col = "red", lwd = 2)
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge) > cpmcutoff) >= nsamplescutoff
lclse.filt <- lclse[mask, ]
cpmcutoff <- round(10/min(dge$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge) > cpmcutoff) >= nsamplescutoff
lclse.filt <- lclse[mask, ]
dge.filt <- dge[mask, ]
dim(se.filt)
cpmcutoff <- round(10/min(dge$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge) > cpmcutoff) >= nsamplescutoff
se.filt <- lclse[mask, ]
dge.filt <- dge[mask, ]
dim(se.filt)
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"))
cpmcutoff <- round(10/min(dge$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge) > cpmcutoff) >= nsamplescutoff
se.filt <- lclse[mask, ]
dge.filt <- dge[mask, ]
dim(se.filt)
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"))
cpmcutoff <- round(10/min(dge$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge) > cpmcutoff) >= nsamplescutoff
se.filt <- se[mask, ]
dge.filt <- dge[mask, ]
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"))
cpmcutoff <- round(10/min(dge$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge) > cpmcutoff) >= nsamplescutoff
se.filt <- se[mask, ]
dge.filt <- dge[mask, ]
dim(se.filt)
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"))
se <- readRDS( "seLUAD.rds")
se
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(rowData(se)))
ord <- order(dge$sample$lib.size)
library(SummarizedExperiment)
library(ggplot2)
library(edgeR)
#Introduce data
se <- readRDS( "seLUAD.rds")
se
#Process dge list
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(rowData(se)))
#CPM scaling
CPM <- t(t(dge$counts)/(dge$samples$lib.size/1e+06))
assays(se)$logCPM <- cpm(dge, log = TRUE, prior.count = 0.25)
assays(se)$logCPM[1:3, 1:7]
#Expression level by sample
library(geneplotter)
multidensity(assays(se)$logCPM, xlab = "log2 CPM", legend = NULL,
main = "", cex.axis = 1.2, cex.lab = 1.5, las = 1)
# Distribution of expression across genes
avgexp <- rowMeans(assays(se)$logCPM)
hist(avgexp, xlab = expression(log[2] * "CPM"), main = "", las = 1, col = "gray")
#Filtering genes
cpmcutoff <- round(10/min(dge_luad$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge_luad) > cpmcutoff) >= nsamplescutoff
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"))
se <- readRDS( "seLUAD.rds")
se
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(rowData(se)))
CPM <- t(t(dge$counts)/(dge$samples$lib.size/1e+06))
assays(se)$logCPM <- cpm(dge, log = TRUE, prior.count = 0.25)
assays(se)$logCPM[1:3, 1:7]
se <- readRDS( "seLUAD.rds")
se
CPM <- t(t(dge_luad$counts)/(dge$samples$lib.size/1e+06))
assays(se)$logCPM <- cpm(dge_luad, log = TRUE, prior.count = 0.25)
assays(se)$logCPM[1:3, 1:7]
se <- readRDS( "seLUAD.rds")
se
#Process dge list
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(rowData(se)))
#CPM scaling
CPM <- t(t(dge_luad$counts)/(dge_luad$samples$lib.size/1e+06))
assays(se)$logCPM <- cpm(dge_luad, log = TRUE, prior.count = 0.25)
assays(se)$logCPM[1:3, 1:7]
cpmcutoff <- round(10/min(dge_luad$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge_luad) > cpmcutoff) >= nsamplescutoff
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"))
avgexp <- rowMeans(assays(se)$logCPM)
hist(avgexp, xlab = expression(log[2] * "CPM"), main = "", las = 1, col = "gray")
library(geneplotter)
multidensity(assays(se)$logCPM, xlab = "log2 CPM", legend = NULL,
main = "", cex.axis = 1.2, cex.lab = 1.5, las = 1)
dge <- DGEList(counts = assays(lclse)$counts, genes = as.data.frame(rowData(lclse)))
dge$samples$group <- lclse$gender
table(dge$samples$group)
dge.filt$samples$group <- lclse$gender
dge <- DGEList(counts = assays(lclse)$counts, genes = as.data.frame(mcols(lclse)), group = lclse$gender)
plotSmear(dge, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
plotSmear(dge, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
plotSmear(dge_luad, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(mcols(se)), group = se$type)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
plotSmear(dge_luad, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(mcols(se)), group = se$type)
CPM <- t(t(dge_luad$counts)/(dge_luad$samples$lib.size/1e+06))
assays(se)$logCPM <- cpm(dge_luad, log = TRUE, prior.count = 0.25)
assays(se)$logCPM[1:3, 1:7]
library(geneplotter)
multidensity(assays(se)$logCPM, xlab = "log2 CPM", legend = NULL,
main = "", cex.axis = 1.2, cex.lab = 1.5, las = 1)
avgexp <- rowMeans(assays(se)$logCPM)
hist(avgexp, xlab = expression(log[2] * "CPM"), main = "", las = 1, col = "gray")
cpmcutoff <- round(10/min(dge_luad$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
cpmcutoff <- round(10/min(dge_luad$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge_luad) > cpmcutoff) >= nsamplescutoff
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"))
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(mcols(se)), group = se$type)
plotSmear(dge_luad, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
mask <- rowSums(cpm(dge_luad) > cpmcutoff) >= 0
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
mask <- rowSums(cpm(dge_luad) > 0) >= nsamplescutoff
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
mask <- rowMeans(assays(lclse)$logCPM) > 1
lclse.filt <- lclse[mask, ]
dge.filt <- dge[mask, ]
dim(lclse.filt)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
mask <- rowMeans(assays(lclse)$logCPM) > 0
lclse.filt <- lclse[mask, ]
dge.filt <- dge[mask, ]
dim(lclse.filt)
# Vuvuzela plot refiltered
mask <- rowMeans(assays(lclse)$logCPM) > 2
lclse.filt <- lclse[mask, ]
dge.filt <- dge[mask, ]
dim(lclse.filt)
# Vuvuzela plot
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
# Vuvuzela plot refiltered
mask <- rowMeans(assays(lclse)$logCPM) > 5
lclse.filt <- lclse[mask, ]
dge.filt <- dge[mask, ]
dim(lclse.filt)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
mask <- rowMeans(assays(lclse)$logCPM) > 5
se.filt <- lclse[mask, ]
dge.filt <- dge[mask, ]
dim(se.filt)
mask <- rowMeans(assays(se)$logCPM) > 5
se.filt <- se[mask, ]
dge.filt <- dge[mask, ]
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
mask <- rowMeans(assays(se)$logCPM) > 5
se.filt <- se[mask, ]
dge.filt <- dge[mask, ]
dim(se.filt)
mask <- rowMeans(assays(se)$logCPM) > 5
se.filt <- se[mask, ]
dge_luad.filt <- dge[mask, ]
dim(se.filt)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
se <- readRDS( "seLUAD.rds")
se
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(mcols(se)), group = se$type)
mask <- rowMeans(assays(se)$logCPM) > 5
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(mcols(se)), group = se$type)
mask <- rowMeans(assays(se)$logCPM) > 5
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
se <- readRDS( "seLUAD.rds")
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(mcols(se)), group = se$type)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(mcols(se)), group = se$type)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
mask <- rowSums(cpm(dge_luad) > cpmcutoff) >= nsamplescutoff
se.filt <- se[mask, ]
cpmcutoff <- round(10/min(dge_luad$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge_luad) > cpmcutoff) >= nsamplescutoff
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
avgexp <- rowMeans(assays(se)$logCPM)
avgexp <- rowMeans(assays(se)$logCPM)
library(SummarizedExperiment)
library(ggplot2)
library(edgeR)
se <- readRDS( "seLUAD.rds")
se
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(mcols(se)), group = se$type)
CPM <- t(t(dge_luad$counts)/(dge_luad$samples$lib.size/1e+06))
assays(se)$logCPM <- cpm(dge_luad, log = TRUE, prior.count = 0.25)
assays(se)$logCPM[1:3, 1:7]
library(geneplotter)
multidensity(assays(se)$logCPM, xlab = "log2 CPM", legend = NULL,
main = "", cex.axis = 1.2, cex.lab = 1.5, las = 1)
avgexp <- rowMeans(assays(se)$logCPM)
hist(avgexp, xlab = expression(log[2] * "CPM"), main = "", las = 1, col = "gray")
cpmcutoff <- round(10/min(dge_luad$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge_luad) > cpmcutoff) >= nsamplescutoff
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"))
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(mcols(se)), group = se$type)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
mask <- rowMeans(assays(se)$logCPM) > 5
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
# Vuvuzela plot refiltered
mask <- rowMeans(assays(se)$logCPM) > 1
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7)
legend("topleft", c("Normal", "Tumor"), fill = c("red", "blue"), inset = 0.05, cex = 0.7)
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7,pch = 46)
legend("topleft", c("Normal", "Tumor"), fill = c("red", "blue"), inset = 0.05, cex = 0.7)
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 3,pch = 46)
legend("topleft", c("Normal", "Tumor"), fill = c("red", "blue"), inset = 0.05, cex = 0.7)
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 7.5, pch = 34)
legend("topleft", c("Normal", "Tumor"), fill = c("red", "blue"), inset = 0.05, cex = 0.7)
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 6, pch = 22)
