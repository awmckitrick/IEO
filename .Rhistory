dge_luad.filt <- dge_luad.filt[mask, ]
dim(dge_luad.filt)
##########################
## DIfferential expression
##########################
# 1. Create SVA models
mod <- model.matrix(~ se.filt$type, colData(se.filt))
mod0 <- model.matrix(~ 1, colData(se.filt))
pv <- f.pvalue(assays(se.filt)$logCPM, mod, mod0)
sum(p.adjust(pv, method = "bonferroni") < 0.01)
sv <- sva(assays(se.filt)$logCPM, mod, mod0)
sv$n
modsv <- cbind(mod, sv$sv)
mod0sv <- cbind(mod0, sv$sv)
pvsv <- f.pvalue(assays(se.filt)$logCPM, mod, mod0)
sum(p.adjust(pvsv, method="bonferroni") < 0.01)
par(mfrow = c(1,1))
v <- voom(dge_luad.filt, modsv, plot=TRUE)
#2. Fit linear model
par(mfrow = c(1,1))
fit5 <- lmFit(v, mod)
fit5sv <- lmFit(v,modsv)
#3. T-statistics
fit5 <- eBayes(fit5)
fit5sv <- eBayes(fit5sv)
#4. Extend of differencial expression
FDRcutoff <- 0.05
res5 <- decideTests(fit5, p.value = FDRcutoff)
summary(res5)
res5sv <- decideTests(fit5sv, p.value = FDRcutoff)
summary(res5sv)
#5. Metadata and fetch table
genesmd <- data.frame(
chr = as.character(seqnames(rowRanges(se.filt))),
symbol = rowData(se.filt)[, 1],
stringsAsFactors = FALSE) # We have to say explicitly metadata is not a factor
fit5$genes <- genesmd
tt5 <- topTable(fit5, coef = 2, n = Inf)
head(tt5)
genesmd <- data.frame(
chr = as.character(seqnames(rowRanges(se.filt))),
symbol = rowData(se.filt)[, 1],
stringsAsFactors = FALSE) # We have to say explicitly metadata is not a factor
fit5sv$genes <- genesmd
tt5sv <- topTable(fit5sv, coef = 2, n = Inf)
head(tt5sv)
#6. Chromosome distribution
sort(table(tt5$chr[tt5$adj.P.Val < FDRcutoff]), decreasing = TRUE)
sort(table(tt5sv$chr[tt5sv$adj.P.Val < FDRcutoff]), decreasing = TRUE)
#8. Diagnostic plots
par(mfrow = c(1, 2), mar = c(4, 5, 2, 2))
hist(tt5sv$P.Value, xlab = "Raw P-values", main = "", las = 1)
qqt(fit5$t[, 2], df = fit5$df.prior + fit5$df.residual, main = "", pch = ".", cex = 3)
abline(0, 1, lwd = 2)
tss <- substr(colnames(se.filt), 6, 7)
names(tss) <- colnames(se.filt)
assays(se.filt)$tss <- tss
tss
dim(tss)
assays(se.filt)$tss <- tss
assays(se)$tss <- tss
tss <- substr(colnames(se.filt), 6, 7)
names(tss) <- colnames(se.filt)
assays(se.filt)$tss <- tss
dim(tss)
tss
logCPM
length(names(logCPM))
names(logCPM)
logCPM
class(logCPM)
logCPM[1,]
logCPM[2,]
logCPM[1,2]
logCPM[1,1]
logCPM[2,1]
logCPM
head(logCPM)
logCPM
head(logCPM)
nrow(logCPM)
ncol(logCPM)
se.filt$tss <- tss
se.filt$tss
se.filt$plate
table(portionanalyte)
table(data.frame(TYPE=se.filt$type, PORTIONALYTE=portionanalyte))
#################
## Charge modules
#################
library(knitr)
library(SummarizedExperiment)
library(edgeR)
library(ggplot2)
library(plyr)
library(sva)
library(grid)
library(geneplotter)
library(limma)
library(corpcor)
##################
## Initialize data
##################
# Charge data
se <- readRDS( "seLUAD.rds")
#Charge sample variables
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(mcols(se)), group = se$type)
# Logaritmize
CPM <- t(t(dge_luad$counts)/(dge_luad$samples$lib.size/1e+06))
assays(se)$logCPM <- cpm(dge_luad, log = TRUE, prior.count = 0.25)
assays(se)$logCPM[1:3, 1:7]
# Apply filters
cpmcutoff <- round(10/min(dge_luad$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge_luad) > cpmcutoff) >= nsamplescutoff
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
# Normalize
dge_luad.filt <- calcNormFactors(dge_luad.filt, normalize.method="quantile")
# Batch effect variables and add them to the summarized experiment
tss <- substr(colnames(se.filt), 6, 7)
names(tss) <- colnames(se.filt)
se.filt$tss <- tss
center <- substr(colnames(se.filt), 27, 28)
names(center) <- colnames(se.filt)
se.filt$center <- center
plate <- substr(colnames(se.filt), 22, 25)
names(plate) <- colnames(se.filt)
se.filt$plate <- plate
portionanalyte <- substr(colnames(se.filt), 18, 20)
names(portionanalyte) <- colnames(se.filt)
se.filt$portionanalyte <- portionanalyte
samplevial <- substr(colnames(se.filt), 14, 16)
names(samplevial) <- colnames(se.filt)
se.filt$samplevial <- samplevial
gender <- unname(se.filt$gender)
names(gender) <- colnames(se.filt)
se.filt$gender <- gender
race <- unname(se.filt$race)
histo <- unname(se.filt$histologic_diagnosis.1)
# Removing batch effect
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count = 3)
batch <- as.integer(factor(samplevial))
logCPM.batch <- logCPM
logCPM <-removeBatchEffect(logCPM, batch, design = mod)
assays(se.filt)$logCPM <- logCPM
s <- fast.svd(t(scale(t(logCPM), center = TRUE, scale = TRUE)))
pcSds <- s$d
pcSds[1] <- 0
svdexp <- s$u %*% diag(pcSds) %*% t(s$v)
colnames(svdexp) <- colnames(se.filt)
d <- as.dist(1-cor(svdexp, method="spearman"))
sampleClustering <- hclust(d)
sampleDendrogram <- as.dendrogram(sampleClustering, hang=0.1)
names(outcome) <- colnames(se.filt)
# Filter by logCPM
mask <- rowMeans(assays(se.filt)$logCPM) > 1
sum(mask)
se.filt <- se.filt[mask, ]
dim(se.filt)
dge_luad.filt <- dge_luad.filt[mask, ]
dim(dge_luad.filt)
##########################
## DIfferential expression
##########################
# 1. Create SVA models
mod <- model.matrix(~ se.filt$type + se.filt$tss + se.filt$samplevial + se.filt$plate, colData(se.filt))
mod0 <- model.matrix(~ 1, colData(se.filt))
pv <- f.pvalue(assays(se.filt)$logCPM, mod, mod0)
sum(p.adjust(pv, method = "bonferroni") < 0.01)
sv <- sva(assays(se.filt)$logCPM, mod, mod0)
sv$n
modsv <- cbind(mod, sv$sv)
mod0sv <- cbind(mod0, sv$sv)
pvsv <- f.pvalue(assays(se.filt)$logCPM, mod, mod0)
sum(p.adjust(pvsv, method="bonferroni") < 0.01)
par(mfrow = c(1,1))
v <- voom(dge_luad.filt, modsv, plot=TRUE)
setwd("~/master_bioinfo/ieo/real_project")
library(knitr)
library(SummarizedExperiment)
library(edgeR)
library(ggplot2)
library(plyr)
library(sva)
library(grid)
library(geneplotter)
library(limma)
library(corpcor)
se <- readRDS( "seLUAD.rds")
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(mcols(se)), group = se$type)
CPM <- t(t(dge_luad$counts)/(dge_luad$samples$lib.size/1e+06))
assays(se)$logCPM <- cpm(dge_luad, log = TRUE, prior.count = 0.25)
assays(se)$logCPM[1:3, 1:7]
cpmcutoff <- round(10/min(dge_luad$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge_luad) > cpmcutoff) >= nsamplescutoff
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
dge_luad.filt <- calcNormFactors(dge_luad.filt, normalize.method="quantile")
tss <- substr(colnames(se.filt), 6, 7)
names(tss) <- colnames(se.filt)
se.filt$tss <- tss
center <- substr(colnames(se.filt), 27, 28)
names(center) <- colnames(se.filt)
se.filt$center <- center
plate <- substr(colnames(se.filt), 22, 25)
names(plate) <- colnames(se.filt)
se.filt$plate <- plate
portionanalyte <- substr(colnames(se.filt), 18, 20)
names(portionanalyte) <- colnames(se.filt)
se.filt$portionanalyte <- portionanalyte
samplevial <- substr(colnames(se.filt), 14, 16)
names(samplevial) <- colnames(se.filt)
se.filt$samplevial <- samplevial
gender <- unname(se.filt$gender)
names(gender) <- colnames(se.filt)
se.filt$gender <- gender
race <- unname(se.filt$race)
histo <- unname(se.filt$histologic_diagnosis.1)
mask <- rowMeans(assays(se.filt)$logCPM) > 1
sum(mask)
se.filt <- se.filt[mask, ]
dim(se.filt)
dge_luad.filt <- dge_luad.filt[mask, ]
dim(dge_luad.filt)
mod <- model.matrix(~ se.filt$type + se.filt$tss + se.filt$samplevial + se.filt$plate, colData(se.filt))
mod0 <- model.matrix(~ se.filt$tss + se.filt$samplevial + se.filt$plate, colData(se.filt))
pv <- f.pvalue(assays(se.filt)$logCPM, mod, mod0)
sum(p.adjust(pv, method = "bonferroni") < 0.01)
pv
table(pv)
sum(p.adjust(pv, method = "bonferroni") < 0.01)
sv <- sva(assays(se.filt)$logCPM, mod, mod0)
par(mfrow = c(1,1))
fit5 <- lmFit(v, mod)
fit5 <- lmFit(v, mod)
v <- voom(dge_luad.filt, mod, plot=TRUE)
vsv <- voom(dge_luad.filt, modsv, plot=TRUE)
fit5 <- lmFit(v, mod)
summary(fit5)
fit5 <- eBayes(fit5)
FDRcutoff <- 0.05
res5 <- decideTests(fit5, p.value = FDRcutoff)
summary(res5)
genesmd <- data.frame(
chr = as.character(seqnames(rowRanges(se.filt))),
symbol = rowData(se.filt)[, 1],
stringsAsFactors = FALSE) # We have to say explicitly metadata is not a factor
fit5$genes <- genesmd
tt5 <- topTable(fit5, coef = 2, n = Inf)
head(tt5)
par(mfrow = c(1, 2), mar = c(4, 5, 2, 2))
hist(tt5sv$P.Value, xlab = "Raw P-values", main = "", las = 1)
qqt(fit5$t[, 2], df = fit5$df.prior + fit5$df.residual, main = "", pch = ".", cex = 3)
abline(0, 1, lwd = 2)
pvsv <- f.pvalue(assays(se.filt)$logCPM, modsv, mod0sv)
sum(p.adjust(pvsv, method="bonferroni") < 0.01)
par(mfrow = c(1,2))
volcanoplot(fit5, coef = 2,
highlight = 10,
names = fit5$genes$symbol,
main = "Model fit5",
las = 1)
par(mfrow = c(1,1))
volcanoplot(fit5, coef = 2,
highlight = 10,
names = fit5$genes$symbol,
main = "Model fit5",
las = 1)
mod
summary(mod)
se.filt$tss
se.filt$type
se.filt$tss
levels(tss)
table(tss)
table(samplevial)
table(data.frame(TYPE=se.filt$type, TSS=samplevial))
table(data.frame(TYPE=se.filt$type, PLATE=plate))
table(data.frame(type=se.filt$type, CENTER=center))
table(data.frame(TYPE=se.filt$type, SAMPLEVIAL=samplevial))
table(data.frame(TYPE=se.filt$type, TSS=tss))
table(data.frame(TYPE=se.filt$type, PLATE=plate))
mod <- model.matrix(~ se.filt$type + se.filt$samplevial, colData(se.filt))
mod0 <- model.matrix(~ se.filt$samplevial, colData(se.filt))
pv <- f.pvalue(assays(se.filt)$logCPM, mod, mod0)
sum(p.adjust(pv, method = "bonferroni") < 0.01)
sv <- sva(assays(se.filt)$logCPM, mod, mod0)
sv$n
modsv <- cbind(mod, sv$sv)
mod0sv <- cbind(mod0, sv$sv)
pvsv <- f.pvalue(assays(se.filt)$logCPM, mod, mod0)
sum(p.adjust(pvsv, method="bonferroni") < 0.01)
par(mfrow = c(1,2))
v <- voom(dge_luad.filt, mod, plot=TRUE)
vsv <- voom(dge_luad.filt, modsv, plot=TRUE)
par(mfrow = c(1,1))
fit5 <- lmFit(v, mod)
fit5sv <- lmFit(vsv,modsv)
fit5 <- eBayes(fit5)
fit5sv <- eBayes(fit5sv)
FDRcutoff <- 0.05
res5 <- decideTests(fit5, p.value = FDRcutoff)
summary(res5)
res5sv <- decideTests(fit5sv, p.value = FDRcutoff)
summary(res5sv)
genesmd <- data.frame(
chr = as.character(seqnames(rowRanges(se.filt))),
symbol = rowData(se.filt)[, 1],
stringsAsFactors = FALSE) # We have to say explicitly metadata is not a factor
fit5$genes <- genesmd
tt5 <- topTable(fit5, coef = 2, n = Inf)
head(tt5)
genesmd <- data.frame(
chr = as.character(seqnames(rowRanges(se.filt))),
symbol = rowData(se.filt)[, 1],
stringsAsFactors = FALSE) # We have to say explicitly metadata is not a factor
fit5sv$genes <- genesmd
tt5sv <- topTable(fit5sv, coef = 2, n = Inf)
head(tt5sv)
sort(table(tt5$chr[tt5$adj.P.Val < FDRcutoff]), decreasing = TRUE)
sort(table(tt5sv$chr[tt5sv$adj.P.Val < FDRcutoff]), decreasing = TRUE)
par(mfrow = c(1, 2), mar = c(4, 5, 2, 2))
hist(tt5sv$P.Value, xlab = "Raw P-values", main = "", las = 1)
qqt(fit5$t[, 2], df = fit5$df.prior + fit5$df.residual, main = "", pch = ".", cex = 3)
abline(0, 1, lwd = 2)
fit5 <- eBayes(fit5)
par(mfrow = c(1,1))
volcanoplot(fit5, coef = 2,
highlight = 10,
names = fit5$genes$symbol,
main = "Model fit5",
las = 1)
volcanoplot(fit5sv, coef = 2,
highlight = 10,
names = fit5sv$genes$symbol,
main = "Model fit5 sva",
las = 1)
remove(sv)
library(knitr)
library(SummarizedExperiment)
library(edgeR)
library(ggplot2)
library(plyr)
library(sva)
library(grid)
library(geneplotter)
library(limma)
library(corpcor)
##################
## Initialize data
##################
# Charge data
se <- readRDS( "seLUAD.rds")
#Charge sample variables
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(mcols(se)), group = se$type)
# Logaritmize
CPM <- t(t(dge_luad$counts)/(dge_luad$samples$lib.size/1e+06))
assays(se)$logCPM <- cpm(dge_luad, log = TRUE, prior.count = 0.25)
assays(se)$logCPM[1:3, 1:7]
# Apply filters
cpmcutoff <- round(10/min(dge_luad$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge_luad) > cpmcutoff) >= nsamplescutoff
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
# Normalize
dge_luad.filt <- calcNormFactors(dge_luad.filt, normalize.method="quantile")
# Batch effect variables and add them to the summarized experiment
tss <- substr(colnames(se.filt), 6, 7)
names(tss) <- colnames(se.filt)
se.filt$tss <- tss
center <- substr(colnames(se.filt), 27, 28)
names(center) <- colnames(se.filt)
se.filt$center <- center
plate <- substr(colnames(se.filt), 22, 25)
names(plate) <- colnames(se.filt)
se.filt$plate <- plate
portionanalyte <- substr(colnames(se.filt), 18, 20)
names(portionanalyte) <- colnames(se.filt)
se.filt$portionanalyte <- portionanalyte
samplevial <- substr(colnames(se.filt), 14, 16)
names(samplevial) <- colnames(se.filt)
se.filt$samplevial <- samplevial
gender <- unname(se.filt$gender)
names(gender) <- colnames(se.filt)
se.filt$gender <- gender
race <- unname(se.filt$race)
histo <- unname(se.filt$histologic_diagnosis.1)
# Removing batch effect
#logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count = 3)
#batch <- as.integer(factor(samplevial))
#logCPM.batch <- logCPM
#logCPM <-removeBatchEffect(logCPM, batch, design = mod)
#assays(se.filt)$logCPM <- logCPM
#s <- fast.svd(t(scale(t(logCPM), center = TRUE, scale = TRUE)))
#pcSds <- s$d
#pcSds[1] <- 0
#svdexp <- s$u %*% diag(pcSds) %*% t(s$v)
#colnames(svdexp) <- colnames(se.filt)
#d <- as.dist(1-cor(svdexp, method="spearman"))
#sampleClustering <- hclust(d)
#sampleDendrogram <- as.dendrogram(sampleClustering, hang=0.1)
#names(outcome) <- colnames(se.filt)
# Filter by logCPM
mask <- rowMeans(assays(se.filt)$logCPM) > 1
sum(mask)
se.filt <- se.filt[mask, ]
dim(se.filt)
dge_luad.filt <- dge_luad.filt[mask, ]
dim(dge_luad.filt)
##########################
## DIfferential expression
##########################
# 1. Create SVA models
mod <- model.matrix(~ se.filt$type + se.filt$samplevial, colData(se.filt))
mod0 <- model.matrix(~ se.filt$samplevial, colData(se.filt))
pv <- f.pvalue(assays(se.filt)$logCPM, mod, mod0)
sum(p.adjust(pv, method = "bonferroni") < 0.01)
sv <- sva(assays(se.filt)$logCPM, mod, mod0)
sv$n
modsv <- cbind(mod, sv$sv)
mod0sv <- cbind(mod0, sv$sv)
pvsv <- f.pvalue(assays(se.filt)$logCPM, mod, mod0)
sum(p.adjust(pvsv, method="bonferroni") < 0.01)
par(mfrow = c(1,2))
v <- voom(dge_luad.filt, mod, plot=TRUE)
vsv <- voom(dge_luad.filt, modsv, plot=TRUE)
#2. Fit linear model
par(mfrow = c(1,1))
fit5 <- lmFit(v, mod)
fit5sv <- lmFit(vsv,modsv)
#3. T-statistics
fit5 <- eBayes(fit5)
fit5sv <- eBayes(fit5sv)
#4. Extend of differencial expression
FDRcutoff <- 0.05
res5 <- decideTests(fit5, p.value = FDRcutoff)
summary(res5)
res5sv <- decideTests(fit5sv, p.value = FDRcutoff)
summary(res5sv)
#5. Metadata and fetch table
genesmd <- data.frame(
chr = as.character(seqnames(rowRanges(se.filt))),
symbol = rowData(se.filt)[, 1],
stringsAsFactors = FALSE) # We have to say explicitly metadata is not a factor
fit5$genes <- genesmd
tt5 <- topTable(fit5, coef = 2, n = Inf)
head(tt5)
genesmd <- data.frame(
chr = as.character(seqnames(rowRanges(se.filt))),
symbol = rowData(se.filt)[, 1],
stringsAsFactors = FALSE) # We have to say explicitly metadata is not a factor
fit5sv$genes <- genesmd
tt5sv <- topTable(fit5sv, coef = 2, n = Inf)
head(tt5sv)
#6. Chromosome distribution
sort(table(tt5$chr[tt5$adj.P.Val < FDRcutoff]), decreasing = TRUE)
sort(table(tt5sv$chr[tt5sv$adj.P.Val < FDRcutoff]), decreasing = TRUE)
#8. Diagnostic plots
par(mfrow = c(1, 2), mar = c(4, 5, 2, 2))
hist(tt5sv$P.Value, xlab = "Raw P-values", main = "", las = 1)
qqt(fit5$t[, 2], df = fit5$df.prior + fit5$df.residual, main = "", pch = ".", cex = 3)
abline(0, 1, lwd = 2)
pvsv <- f.pvalue(assays(se.filt)$logCPM, modsv, mod0sv)
sum(p.adjust(pvsv, method="bonferroni") < 0.01)
par(mfrow = c(1, 2), mar = c(4, 5, 2, 2))
hist(tt5sv$P.Value, xlab = "Raw P-values", main = "", las = 1)
qqt(fit5sv$t[, 2], df = fit5sv$df.prior + fit5sv$df.residual, main = "", pch = ".", cex = 3)
abline(0, 1, lwd = 2)
pvsv <- f.pvalue(assays(se.filt)$logCPM, modsv, mod0sv)
sum(p.adjust(pvsv, method="bonferroni") < 0.01)
# 9. Volcano plot
par(mfrow = c(1,1))
volcanoplot(fit5, coef = 2,
highlight = 10,
names = fit5$genes$symbol,
main = "Model fit5",
las = 1)
volcanoplot(fit5sv, coef = 2,
highlight = 10,
names = fit5sv$genes$symbol,
main = "Model fit5 sva",
las = 1)
# Looking for replicated data
table(table(se.filt$tissue_source_site))
mod
summary(mod)
voom(dge_luad.filt, mod, plot=TRUE)
summary(c)
summary(v)
v$genes
v$targets
mod <- model.matrix(~ se.filt$type + se.filt$samplevial, colData(se.filt))
mod0 <- model.matrix(~ se.filt$samplevial, colData(se.filt))
pv <- f.pvalue(assays(se.filt)$logCPM, mod, mod0)
rm(pv)
pv <- f.pvalue(assays(se.filt)$logCPM, mod, mod0)
pv
cor()
cor(x = mod)
table(data.frame(TYPE=se.filt$type, SAMPLEVIAL=samplevial))
