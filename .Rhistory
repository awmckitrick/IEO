library(ggplot2)
library(plyr)
library(sva)
library(grid)
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(mcols(se)), group = se$type)
CPM <- t(t(dge_luad$counts)/(dge_luad$samples$lib.size/1e+06))
assays(se)$logCPM <- cpm(dge_luad, log = TRUE, prior.count = 0.25)
assays(se)$logCPM[1:3, 1:7]
multidensity(as.list(as.data.frame(assays(se[, se$type == "tumor"])$logCPM)),
xlab="log 2 CPM", legend=NULL, main="Tumor samples", las=1)
library(geneplotter)
multidensity(as.list(as.data.frame(assays(se[, se$type == "tumor"])$logCPM)),
xlab="log 2 CPM", legend=NULL, main="Tumor samples", las=1)
par(mfrow=c(1, 2))
multidensity(as.list(as.data.frame(assays(se[, se$type == "tumor"])$logCPM)),
xlab="log 2 CPM", legend=NULL, main="Tumor samples", las=1)
multidensity(as.list(as.data.frame(assays(se[, se$type == "normal"])$logCPM)),
xlab="log 2 CPM", legend=NULL, main="Normal samples", las=1)
avgexp <- rowMeans(assays(se)$logCPM)
hist(avgexp, xlab = expression(log[2] * "CPM"), main = "", las = 1, col = "gray")
par(mfrow=c(1,1))
hist(avgexp, xlab = expression(log[2] * "CPM"), main = "", las = 1, col = "gray")
cpmcutoff <- round(10/min(dge_luad$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge_luad) > cpmcutoff) >= nsamplescutoff
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
cpmcutoff <- round(10/min(dge_luad$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge_luad) > cpmcutoff) >= nsamplescutoff
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"))
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"),cex = 0.75)
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"),cex = 0.5)
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"),cex = 0.75)
png(filename = "./img/expression_by_gene_corrected.png",width = 600, height = 500)
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"),cex = 0.75)
dev.off()
png(filename = "./img/expression_by_gene_corrected.png",width = 600, height = 500)
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"))
dev.off()
png(filename = "./img/expression_by_gene_corrected.png",width = 600, height = 500)
par(mar=c(mar = c(2,2,2,2))
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"))
dev.off()
### MA plots
# Vuvuzela plot
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
# Vuvuzela plot refiltered
mask <- rowMeans(assays(se)$logCPM) > 1
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
#Vuvuzela plot normalized (TMM)
dge_luad.filt <- calcNormFactors(dge_luad.filt, normalize.method="quantile")
par(mfrow=c(1, 2))
multidensity(as.list(as.data.frame(assays(se[, se$type == "tumor"])$logCPM)),
xlab="log 2 CPM", legend=NULL, main="Tumor samples", las=1)
par(mar=c(mar = c(2,2,2,2))
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"))
dev.off()
### MA plots
# Vuvuzela plot
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
# Vuvuzela plot refiltered
mask <- rowMeans(assays(se)$logCPM) > 1
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
#Vuvuzela plot normalized (TMM)
dge_luad.filt <- calcNormFactors(dge_luad.filt, normalize.method="quantile")
par(mfrow = c(1, 2))
plotSmear(dge_luad, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
# Expression by sample (tumor in blue, normal in green)
par(mfrow=c(5, 4), mar = c(2,2,2,2))
for (i in c(1,581)) {
inici <- i
final <- i+19
for (i in inici:final) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A; C <- se.filt$type[[i]];
print(C)
smoothScatter(A, M,
main=colnames(se.filt)[i],
las=1,
cex.axis=1.2,
cex.lab=1.5,
cex.main=1,
colramp = colorRampPalette(c("white",ifelse(C == "tumor", "blue","green")),space = "Lab"))
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
}
png(filename = "./img/expression_by_gene_corrected.png",width = 600, height = 500)
par(mar = c(2,2,2,2))
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"))
dev.off()
par(mar = c(5.1,5.1,5.1,2.1))
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"))
png(filename = "./img/expression_by_gene_corrected.png",width = 600, height = 500)
par(mar = c(5.1,5.1,5.1,2.1))
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"))
dev.off()
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
par(mar = c(5.1,5.1,5.1,2.1))
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
par(mar = c(5.1,4.1,4.1,2.1))
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
par(mar = c(5.1,4.1,4.1,2.1))
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
par(mar = c(5.1,4.1,4.1,2.1))
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
par(mar = c(5.1,4.1,4.1,2.1),mfrow = c(1,1))
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
par(mar = c(5.1,5.1,4.1,2.1),mfrow = c(1,1))
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
mask <- rowMeans(assays(se)$logCPM) > 1
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
par(mfrow = c(1, 2))
plotSmear(dge_luad, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
par(mfrow = c(1, 2))
plotSmear(dge_luad, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
par(mar = c(5.1,5.1,4.1,2.1),mfrow = c(1, 2))
plotSmear(dge_luad, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
par(mar = c(5.1,4.1,4.1,2.1),mfrow = c(1, 2))
plotSmear(dge_luad, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
par(mar = c(5.1,5.1,4.1,2.1),mfrow = c(1,1))
plotSmear(dge_luad, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
dge_luad.filt <- calcNormFactors(dge_luad.filt, normalize.method="quantile")
par(mar = c(5.1,4.1,4.1,2.1),mfrow = c(1, 2))
plotSmear(dge_luad, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
dge_luad.filt <- calcNormFactors(dge_luad.filt, normalize.method="quantile")
par(mar = c(5.1,4.1,4.1,2.1),mfrow = c(1, 2))
plotSmear(dge_luad, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
par(mar = c(5.1,5.1,4.1,2.1),mfrow = c(1,1))
plotSmear(dge_luad, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
mask <- rowMeans(assays(se)$logCPM) > 1
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
dge_luad.filt <- calcNormFactors(dge_luad.filt, normalize.method="quantile")
par(mar = c(5.1,4.1,4.1,2.1),mfrow = c(1, 2))
plotSmear(dge_luad, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
par(mar = c(5.1,4.1,4.1,2.1),mfrow = c(1, 2))
plotSmear(dge_luad, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2, main = "Preprocesed data")
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2, main = "Filtered and normalized data")
png("./img/vuvuzelas.png",height = 500, width = 1000)
par(mar = c(5.1,4.1,4.1,2.1),mfrow = c(1, 2))
plotSmear(dge_luad, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2, main = "Preprocesed data")
abline(h = 0, col = "blue", lwd = 2)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2, main = "Filtered and normalized data")
abline(h = 0, col = "blue", lwd = 2)
dev.off()
par(mfrow=c(5, 4), mar = c(2,2,2,2))
for (i in c(1,581)) {
inici <- i
final <- i+19
for (i in inici:final) {
A <- rowMeans(assays(se.filt)$logCPM) ; M <- assays(se.filt)$logCPM[, i] - A; C <- se.filt$type[[i]];
print(C)
smoothScatter(A, M,
main=colnames(se.filt)[i],
las=1,
cex.axis=1.2,
cex.lab=1.5,
cex.main=1,
colramp = colorRampPalette(c("white",ifelse(C == "tumor", "blue","green")),space = "Lab"))
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
}
par(mfrow = c(1,1), mar = c(5.1,4.1,4.1,2.1))
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7)
legend("topright", c("Normal", "Tumor"), fill = c("red", "blue"), inset = 0.05, cex = 0.7)
png("img/MDS_type.png",width = 1080, height = 960)
par(mfrow = c(1,1), mar = c(5.1,4.1,4.1,2.1))
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7,main = "MDS plot: Normal vs tumor")
legend("topright", c("Normal", "Tumor"), fill = c("red", "blue"), inset = 0.05, cex = 0.7)
dev.off()
png("img/MDS_type.png",width = 900, height = 800)
par(mfrow = c(1,1), mar = c(5.1,4.1,4.1,2.1))
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7,main = "MDS plot: Normal vs tumor")
legend("topright", c("Normal", "Tumor"), fill = c("red", "blue"), inset = 0.05, cex = 0.7)
dev.off()
png("img/MDS_type.png",width = 800, height = 700)
par(mfrow = c(1,1), mar = c(5.1,4.1,4.1,2.1))
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7,main = "MDS plot: Normal vs tumor")
legend("topright", c("Normal", "Tumor"), fill = c("red", "blue"), inset = 0.05, cex = 0.7)
dev.off()
png("img/MDS_type.png",width = 820, height = 700)
par(mfrow = c(1,1), mar = c(5.1,4.1,4.1,2.1))
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7,main = "MDS plot: Normal vs tumor")
legend("topright", c("Normal", "Tumor"), fill = c("red", "blue"), inset = 0.05, cex = 1)
dev.off()
png("img/MDS_type.png",width = 1000, height = 700)
par(mfrow = c(1,1), mar = c(5.1,4.1,4.1,2.1))
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7, main = "MDS plot: Normal vs tumor")
legend("topright", c("Normal", "Tumor"), fill = c("red", "blue"), inset = 0.05, cex = 1)
dev.off()
## Identifying batch effect: We'll use TCGA
tss <- substr(colnames(se.filt), 6, 7)
table(tss)
center <- substr(colnames(se.filt), 27, 28)
table(center)
#All samples on same center: we can delete
plate <- substr(colnames(se.filt), 22, 25)
table(plate)
portionanalyte <- substr(colnames(se.filt), 18, 20)
table(portionanalyte)
samplevial <- substr(colnames(se.filt), 14, 16)
table(samplevial)
gender <- unname(se.filt$gender)
race <- unname(se.filt$race)
histo <- unname(se.filt$histologic_diagnosis.1)
png("img/MDS_type.png",width = 1100, height = 700)
par(mfrow = c(1,1), mar = c(5.1,4.1,4.1,2.1))
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7, main = "MDS plot: Normal vs tumor")
legend("topright", c("Normal", "Tumor"), fill = c("red", "blue"), inset = 0.05, cex = 1)
dev.off()
titles_batchs <- c("MDS plot: Tisue Source Site",
"MDS plot: Plate",
"MDS plot: Sex",
"MDS plot: Ethnicity",
"MDS plot: Histology")
objects_batchs <- list(tss, plate, gender,race, histo)
outcome <- paste(substr(colnames(se.filt), 9, 12), as.character(se.filt$type), sep="-")
for (a in 1:5){
png(filename = paste("projct/img/", titles_batchs[a], sep = ""), width = 1100, height = 700)
par(mfrow=c(1,1))
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(objects_batchs[[a]]))
plotMDS(dge_luad.filt, labels=outcome, col=batch, main =titles_batchs[a])
legend("bottomright", paste("Batch", sort(unique(batch)), levels(factor(a))),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
dev.off()
}
titles_batchs <- c("MDS plot: Tisue Source Site",
"MDS plot: Plate",
"MDS plot: Sex",
"MDS plot: Ethnicity",
"MDS plot: Histology")
objects_batchs <- list(tss, plate, gender,race, histo)
outcome <- paste(substr(colnames(se.filt), 9, 12), as.character(se.filt$type), sep="-")
for (a in 1:5){
png(filename = paste("img/", titles_batchs[a], sep = ""), width = 1100, height = 700)
par(mfrow=c(1,1))
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(objects_batchs[[a]]))
plotMDS(dge_luad.filt, labels=outcome, col=batch, main =titles_batchs[a])
legend("bottomright", paste("Batch", sort(unique(batch)), levels(factor(a))),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
dev.off()
}
egend("bottomright", paste("Batch", sort(unique(batch)), levels(factor(a))),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
par(mfrow=c(1,1))
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(objects_batchs[[a]]))
plotMDS(dge_luad.filt, labels=outcome, col=batch, main =titles_batchs[a])
legend("bottomright", paste(sort(unique(batch)), levels(objects_batchs[[a]])),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", paste(sort(unique(batch)), levels(objects_batchs[[a]])),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", levels(objects_batchs[[a]]),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", levels(objects_batchs[[a]]),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
titles_batchs <- c("MDS plot: Tisue Source Site",
"MDS plot: Plate",
"MDS plot: Sex",
"MDS plot: Ethnicity",
"MDS plot: Histology")
names_batchs <- c("MDS_tss.png",
"MDS_plate.png",
"MDS_sex.png",
"MDS_ethnicity.png",
"MDS_histology.png")
objects_batchs <- list(tss, plate, gender,race, histo)
outcome <- paste(substr(colnames(se.filt), 9, 12), as.character(se.filt$type), sep="-")
for (a in 1:5){
png(filename = paste("img/", names_batchs[a], sep = ""), width = 1100, height = 700)
par(mfrow=c(1,1))
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(objects_batchs[[a]]))
plotMDS(dge_luad.filt, labels=outcome, col=batch, main =titles_batchs[a])
legend("bottomright", levels(objects_batchs[[a]]),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
dev.off()
}
mod <- model.matrix(~ se.filt$type, colData(se.filt))
mod0 <- model.matrix(~ 1, colData(se.filt))
f.pvalue(assays(se.filt)$logCPM, mod, mod0)
pv <- f.pvalue(assays(se.filt)$logCPM, mod, mod0)
se.filt$pv <- pv
se.filt
dge_luad.filt$pv <- pv
dge_luad.filt
assays(se.filt)$logCPM
assays(se.filt)$pv <- pv
plot(assays(se.filt)$logCPM, -log10(f.pvalue(assays(se.filt)$logCPM, mod, mod0)), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
plot(assays(se.filt)$logCPM, -log10(p.adjust(pv, method="fdr"), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
abline(h=-log10(max(tab$Pvalue[tab$FDRpvalue <= 0.05])), lty=2)
plot(assays(se.filt)$logCPM, -log10(p.adjust(pv, method="fdr")), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
pv
assays(se.filt)$logCPM
plot(assays(se.filt)$logCPM, -log10(p.adjust(pv, method="fdr"), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
abline(h=-log10(max(tab$Pvalue[tab$FDRpvalue <= 0.05])), lty=2)
plot(assays(se.filt)$logCPM, -log10(p.adjust(pv, method="fdr")), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
abline(h=-log10(max(tab$Pvalue[tab$FDRpvalue <= 0.05])), lty=2)
plot(assays(se.filt)$logCPM, -log10(p.adjust(pv, method="fdr")), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
length(assays(se.filt)$logCPM)
length(pv)
assays(se.filt)$logCPM
dge_luad
mod <- model.matrix(~ se.filt$type, colData(se.filt))
mod0 <- model.matrix(~ 1, colData(se.filt))
pv <- f.pvalue(assays(se.filt)$logCPM, mod, mod0)
FDRpvalue <- p.adjust(pv, method="fdr")
tumorExp <- rowMeans(logCPM.filt[, se.filt$type == "tumor"])
normalExp <- rowMeans(logCPM.filt[, se.filt$type == "normal"])
par(mfrow = c(1, 2))
plot(tumorExp, normalExp, xlab = "Tumor", ylab = "Normal", pch = ".", cex = 4, las = 1)
plot((tumorExp + normalExp)/2, tumorExp - normalExp, pch = ".", cex = 4, las = 1)
## DE analysis in normal & log format (only tumor samples)
logCPM.filt <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
logCPM <- cpm(dge_luad, log=TRUE, prior.count=3)
meanUnloggedExp.filt <- rowMeans(assays(se.filt)$counts)
meanUnloggedExp <- rowMeans(assays(se)$counts)
sdUnloggedExp.filt <- apply(assays(se.filt)$counts, 1, sd)
sdUnloggedExp <- apply(assays(se)$counts, 1, sd)
meanLoggedExp.filt <- rowMeans(logCPM.filt)
meanLoggedExp <- rowMeans(logCPM)
sdLoggedExp <- apply(logCPM, 1, sd)
sdLoggedExp.filt <- apply(logCPM.filt, 1, sd)
par(mfrow=c(1, 2))
mod <- model.matrix(~ se.filt$type, colData(se.filt))
mod0 <- model.matrix(~ 1, colData(se.filt))
pv <- f.pvalue(assays(se.filt)$logCPM, mod, mod0)
FDRpvalue <- p.adjust(pv, method="fdr")
tumorExp <- rowMeans(logCPM.filt[, se.filt$type == "tumor"])
normalExp <- rowMeans(logCPM.filt[, se.filt$type == "normal"])
par(mfrow = c(1, 2))
plot(tumorExp, normalExp, xlab = "Tumor", ylab = "Normal", pch = ".", cex = 4, las = 1)
plot((tumorExp + normalExp)/2, tumorExp - normalExp, pch = ".", cex = 4, las = 1)
plot(meanLoggedExp, sdLoggedExp, pch=".", cex=4, xlab="Log mean expression", ylab="SD", main= "Differential expression preprocessed")
lines(lowess(meanLoggedExp, sdLoggedExp, f=0.25), lwd=2, col="red")
plot(meanLoggedExp, sdLoggedExp, pch=".", cex=4, xlab="Log mean expression", ylab="SD", main= "Differential expression preprocessed")
par(mfrow=c(1, 2), mar = c(5.1,4.1,4.1,2.1) )
plot(meanLoggedExp, sdLoggedExp, pch=".", cex=4, xlab="Log mean expression", ylab="SD", main= "Differential expression preprocessed")
par(mfrow=c(1, 2), mar = c(5.1,3.1,3.1,2.1) )
plot(meanLoggedExp, sdLoggedExp, pch=".", cex=4, xlab="Log mean expression", ylab="SD", main= "Differential expression preprocessed")
lines(lowess(meanLoggedExp, sdLoggedExp, f=0.25), lwd=2, col="red")
plot(meanLoggedExp.filt, sdLoggedExp.filt, pch=".", cex=4, xlab="Log mean expression", ylab="SD", main= "Differential expression filtered")
lines(lowess(meanLoggedExp.filt, sdLoggedExp.filt, f=0.25), lwd=2, col="red")
mod <- model.matrix(~ se.filt$type, colData(se.filt))
mod0 <- model.matrix(~ 1, colData(se.filt))
pv <- f.pvalue(assays(se.filt)$logCPM, mod, mod0)
FDRpvalue <- p.adjust(pv, method="fdr")
tumorExp <- rowMeans(logCPM.filt[, se.filt$type == "tumor"])
normalExp <- rowMeans(logCPM.filt[, se.filt$type == "normal"])
par(mfrow = c(1, 2))
plot(tumorExp, normalExp, xlab = "Tumor", ylab = "Normal", pch = ".", cex = 4, las = 1)
plot((tumorExp + normalExp)/2, tumorExp - normalExp, pch = ".", cex = 4, las = 1)
logFC <- tumorExp-normalExp
plot(logFC, -log10(pv), pch=".", cex=3, xlab="Log fold-change", ylab="-log10 Raw p-value", las=1)
abline(h=-log10(max(pv[FDRpvalue <= 0.00000000000001])), lty=2)
par(mfrow = c(1,1))
logFC <- tumorExp-normalExp
plot(logFC, -log10(pv), pch=".", cex=3, xlab="Log fold-change", ylab="-log10 Raw p-value", las=1)
abline(h=-log10(max(pv[FDRpvalue <= 0.00000000000001])), lty=2)
abline(h=-log10(max(pv[FDRpvalue <= 0.01])), lty=2)
abline(h=-log10(max(pv[FDRpvalue <= 0.001])), lty=2)
plot(logFC, -log10(pv), pch=3, cex=3, xlab="Log fold-change", ylab="-log10 Raw p-value", las=1)
plot(logFC, -log10(pv), pch=1, cex=3, xlab="Log fold-change", ylab="-log10 Raw p-value", las=1)
plot(logFC, -log10(pv), pch=22, cex=3, xlab="Log fold-change", ylab="-log10 Raw p-value", las=1)
plot(logFC, -log10(pv), pch=16, cex=3, xlab="Log fold-change", ylab="-log10 Raw p-value", las=1)
plot(logFC, -log10(pv), pch=16, cex=0.5, xlab="Log fold-change", ylab="-log10 Raw p-value", las=1)
plot(logFC, -log10(pv), pch=16, cex=0.05, xlab="Log fold-change", ylab="-log10 Raw p-value", las=1)
plot(logFC, -log10(pv), pch=16, cex=0.1, xlab="Log fold-change", ylab="-log10 Raw p-value", las=1)
plot(logFC, -log10(pv), pch=16, cex=0.1, xlab="Log fold-change", ylab="-log10 Raw p-value", las=1)
plot(logFC, -log10(pv), pch=16, cex=0.2, xlab="Log fold-change", ylab="-log10 Raw p-value", las=1)
plot(logFC, -log10(pv), pch=16, cex=0.7, xlab="Log fold-change", ylab="-log10 Raw p-value", las=1)
png("./img/DE_analysis.png",width=1224,height = 926)
par(mfrow=c(1, 2), mar = c(5.1,3.1,3.1,2.1) )
plot(meanLoggedExp, sdLoggedExp, pch=".", cex=4, xlab="Log mean expression", ylab="SD", main= "Differential expression preprocessed")
lines(lowess(meanLoggedExp, sdLoggedExp, f=0.25), lwd=2, col="red")
plot(meanLoggedExp.filt, sdLoggedExp.filt, pch=".", cex=4, xlab="Log mean expression", ylab="SD", main= "Differential expression filtered")
lines(lowess(meanLoggedExp.filt, sdLoggedExp.filt, f=0.25), lwd=2, col="red")
dev.off()
png("./img/DE_analysis.png",width=900,height = 400)
par(mfrow=c(1, 2), mar = c(5.1,3.1,3.1,2.1) )
plot(meanLoggedExp, sdLoggedExp, pch=".", cex=4, xlab="Log mean expression", ylab="SD", main= "Differential expression preprocessed")
lines(lowess(meanLoggedExp, sdLoggedExp, f=0.25), lwd=2, col="red")
plot(meanLoggedExp.filt, sdLoggedExp.filt, pch=".", cex=4, xlab="Log mean expression", ylab="SD", main= "Differential expression filtered")
lines(lowess(meanLoggedExp.filt, sdLoggedExp.filt, f=0.25), lwd=2, col="red")
dev.off()
png("./img/FC_analysis.png",width=900,height = 400)
mod <- model.matrix(~ se.filt$type, colData(se.filt))
mod0 <- model.matrix(~ 1, colData(se.filt))
pv <- f.pvalue(assays(se.filt)$logCPM, mod, mod0)
FDRpvalue <- p.adjust(pv, method="fdr")
tumorExp <- rowMeans(logCPM.filt[, se.filt$type == "tumor"])
normalExp <- rowMeans(logCPM.filt[, se.filt$type == "normal"])
par(mfrow = c(1, 2))
plot(tumorExp, normalExp, xlab = "Tumor", ylab = "Normal", pch = ".", cex = 4, las = 1)
plot((tumorExp + normalExp)/2, tumorExp - normalExp, pch = ".", cex = 4, las = 1)
dev.off()
png("./img/volcano_plot.png",width=600,height = 800)
par(mfrow = c(1,1))
logFC <- tumorExp-normalExp
plot(logFC, -log10(pv), pch=16, cex=0.7, xlab="Log fold-change", ylab="-log10 Raw p-value", las=1)
abline(h=-log10(max(pv[FDRpvalue <= 0.001])), lty=2)
dev.off()
png("./img/volcano_plot.png",width=300,height = 400)
par(mfrow = c(1,1))
logFC <- tumorExp-normalExp
plot(logFC, -log10(pv), pch=16, cex=0.7, xlab="Log fold-change", ylab="-log10 Raw p-value", las=1)
abline(h=-log10(max(pv[FDRpvalue <= 0.001])), lty=2)
dev.off()
png("./img/volcano_plot.png",width=400,height = 400)
par(mfrow = c(1,1))
logFC <- tumorExp-normalExp
plot(logFC, -log10(pv), pch=16, cex=0.7, xlab="Log fold-change", ylab="-log10 Raw p-value", las=1)
abline(h=-log10(max(pv[FDRpvalue <= 0.001])), lty=2)
dev.off()
