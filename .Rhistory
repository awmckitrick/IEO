sspredres
sspredres <-sum((Y-predy)^2)
sspredres
Y
predY
y-predy
Y-predy
Y-predY
(Y-predY)^2
sum((Y-predY)^2)
Y-meany
(predY-meany)+(Y-predy)
(predY-meany)+(Y-predY)
sum(Y-meany)
sum((Y-meany)^2)
sum((predY-meany)^2)
sum((Y-predy)^2)
sum((Y-predY)^2)
sum((Y-predY))
sum((Y-predY)^2)
429+1759
sstotal <- sum(Y^2) - ((sum(Y))^2)/n
sstotal
#ss for X1
xy <- 0
for(obj in 1:nrow(ex4data)){
xy <- xy + ex4data$Y[obj]*ex4data$X1[obj]
}
spx1y2 <- (xy - (sum(Y) * sum(X1))/n)^2
scx1 <- sum(X1^2) - sum(X1)^2/n
ssx1 <- (spx1y2)/(scx1)
ssx1
##ss for X2
xy <- 0
for(obj in 1:nrow(ex4data)){
xy <- xy + ex4data$Y[obj]*ex4data$X2[obj]
}
spx2y2 <- (xy - (sum(Y) * sum(X2))/n)^2
scx2 <- sum(X2^2) - sum(X2)^2/n
ssx2 <- (spx2y2)/(scx2)
ssx2
ssres <- sstotal - ssx1 - ssx2
ssres
sstotal <- sum(Y^2) - ((sum(Y))^2)/n
sstotal
#ss for X1
xy <- 0
for(obj in 1:nrow(ex4data)){
xy <- xy + ex4data$Y[obj]*ex4data$X1[obj]
}
spx1y2 <- (xy - (sum(Y) * sum(X1))/n)^2
scx1 <- sum(X1^2) - sum(X1)^2/n
ssx1 <- (spx1y2)/(scx1)
ssx1
##ss for X2
xy <- 0
for(obj in 1:nrow(ex4data)){
xy <- xy + ex4data$Y[obj]*ex4data$X2[obj]
}
spx2y2 <- (xy - (sum(Y) * sum(X2))/n)^2
scx2 <- sum(X2^2) - sum(X2)^2/n
ssx2 <- (spx2y2)/(scx2)
ssx2
ssres <- sstotal - ssx1 - ssx2
ssres
meany <- mean(Y)
meany
sspry <-sum((predY-Y)^2)
sspry
meany <- mean(Y)
meany
sspry <-sum((predY-meanY)^2)
meany <- mean(Y)
meany
sspry <-sum((predY-meany)^2)
sspry
meany <- mean(Y)
meany
sspry <-sum((predY-Y)^2)
sspry
meany <- mean(Y)
meany
sspry <-sum((predY-Y))
sspry
par(mar=c(1,1,1,1))#For avoiding "figure margins too large" error
layout(matrix(c(1,2),nrow=1,ncol=2,byrow=T), widths=c(1,1), heights=c(1), TRUE)
hist(meanex1group,breaks = 30, col = "lightblue")
meanex1group <- replicate(2000, mean(rnorm(n = 25,mean = 20,sd = 5)))
sdex1group <- replicate(2000, sd(rnorm(n = 25,mean = 20,sd = 5)))
par(mar=c(1,1,1,1))#For avoiding "figure margins too large" error
layout(matrix(c(1,2),nrow=1,ncol=2,byrow=T), widths=c(1,1), heights=c(1), TRUE)
hist(meanex1group,breaks = 30, col = "lightblue")
hist(sdex1group,breaks = 30, col = "lightgreen")
qqnorm(sdex1group)
qqnorm(meanex1group)
sports <- read.table(header = TRUE, file = "sport.txt")
dataex2 <-rnorm(1000000, mean = mean(sports$height), sd = sd(sports$height))
germanlength <- length(sports$height[sports$nationality == "Germany"])
brazillenght <- length(sports$height[sports$nationality == "Brazil"])
ttests <- replicate(10000,t.test(sample(dataex2, germanlength), sample(dataex2, brazillenght))$statistic)
Make an histogram of all t-statistics
dataex2 <-rnorm(1000000, mean = mean(sports$height), sd = sd(sports$height))
germanlength <- length(sports$height[sports$nationality == "Germany"])
brazillenght <- length(sports$height[sports$nationality == "Brazil"])
ttests <- replicate(10000,t.test(sample(dataex2, germanlength), sample(dataex2, brazillenght))$statistic)
germanlength <- length(sports$height[sports$nationality == "Germany"])
germanlength
brazillenght <- length(sports$height[sports$nationality == "Brazil"])
brazillenght
ttests <- replicate(10000,t.test(sample(dataex2, germanlength), sample(dataex2, brazillenght))$statistic)
View(sports)
hist(ttests, breaks = 50,col="green")
hist(ttests, breaks = 50,col="lightgreen")
ttestspvalue
realdoublepvalue <- 2*((t.test(sports$height ~ sports$nationality))$p.value)
ttests <- as.numeric(as.character(ttests))#Converting to numerals
higherttests <- ttests[which(x = ttests <= realdoublepvalue)]
ttestspvalue <- length(higherttests)/length(ttests)
ttestspvalue
head(ttests)
sports <- read.table("sport.txt", header=TRUE)
t.test(sports$height~sports$nationality)
germanlength <- length(sports$height[sports$nationality == "Germany"])
germanlength
brazillenght <- length(sports$height[sports$nationality == "Brazil"])
brazillenght
ttests <- replicate(10000,t.test(sample(dataex2, germanlength), sample(dataex2, brazillenght))$statistic)
head(ttests)
hist(ttests, breaks = 50,col="lightgreen") #The breaks are statted for better appreciate the distribution shape
realdoublepvalue
realdoublepvalue <- 2*((t.test(sports$height ~ sports$nationality))$p.value)
realdoublepvalue
ttests <- as.numeric(as.character(ttests))#Converting to numerals
higherttests <- ttests[which(x = ttests <= realdoublepvalue)]
ttestspvalue <- length(higherttests)/length(ttests)
ttestspvalue
higherttests <- ttests[which(x = ttests <= t.test(sports$height ~ sports$nationality)$t.value)]
ttestspvalue <- length(higherttests)/length(ttests)
ttestspvalue
realdoublepvalue <- 2*((t.test(sports$height ~ sports$nationality))$p.value)
realdoublepvalue
ttests <- as.numeric(as.character(ttests))#Converting to numerals
higherttests <- ttests[which(x = ttests <= t.test(sports$height ~ sports$nationality)$t.value)]
#higherttests <- ttests[which(x = ttests <= realdoublepvalue)]
ttestspvalue <- length(higherttests)/length(ttests)
ttestspvalue
higherttests
t.test(sports$height ~ sports$nationality)$t.value
kr <- t.test(sports$height ~ sports$nationality)$t.value)
kr <- t.test(sports$height ~ sports$nationality)$t.value))
kr <- t.test(sports$height ~ sports$nationality)$t.value
kr <- t.test(sports$height ~ sports$nationality)
realdoublepvalue <- 2*((t.test(sports$height ~ sports$nationality))$p.value)
realdoublepvalue
ttests <- as.numeric(as.character(ttests))#Converting to numerals
higherttests <- ttests[which(x = ttests <= t.test(sports$height ~ sports$nationality)$statistic)]
#higherttests <- ttests[which(x = ttests <= realdoublepvalue)]
ttestspvalue <- length(higherttests)/length(ttests)
ttestspvalue
t.test(sports$height ~ sports$nationality)$statistic
realdoublepvalue <- 2*((t.test(sports$height ~ sports$nationality))$p.value)
realdoublepvalue
ttests <- as.numeric(as.character(ttests))#Converting to numerals
higherttests <- ttests[which(x = ttests <= abs(t.test(sports$height ~ sports$nationality)$statistic))]
#higherttests <- ttests[which(x = ttests <= realdoublepvalue)]
ttestspvalue <- length(higherttests)/length(ttests)
ttestspvalue
realdoublepvalue <- ((t.test(sports$height ~ sports$nationality))$p.value)
realdoublepvalue
ttests <- as.numeric(as.character(ttests))#Converting to numerals
higherttests <- ttests[which(x = ttests <= abs(t.test(sports$height ~ sports$nationality)$statistic))]
#higherttests <- ttests[which(x = ttests <= realdoublepvalue)]
ttestspvalue <- length(higherttests)/length(ttests)
ttestspvalue
realdoublepvalue <- ((t.test(sports$height ~ sports$nationality))$p.value)
realdoublepvalue
ttests <- as.numeric(as.character(ttests))#Converting to numerals
higherttests <- ttests[which(x = ttests <= t.test(sports$height ~ sports$nationality)$statistic)]
#higherttests <- ttests[which(x = ttests <= realdoublepvalue)]
ttestspvalue <- (length(higherttests)/length(ttests))*2
ttestspvalue
dataex3 <- matrix(data = c(2,(8-2),1,(17-1)), nrow = 2,ncol = 2)
colnames(dataex3) <- c("play basket", "don't play basket")
rownames(dataex3) <- c("DRD2dup", "normal")
chisq.test(x = dataex3)
dataex3
newdataex3 <- dataex3*100
chisq.test(newdataex3)
data("ChickWeight")
head(ChickWeight)
datachick <- data.frame(ChickWeight[,c(1,4)])
datachick <- data.frame(ChickWeight[,c(1,4)])
hist(datachick$weight, breaks = 30)
ks.test(datachick$weight, pnorm)
hist(datachick$weight, breaks = 30)
ks.test(datachick$weight, pnorm)
hist(datachick$weight, breaks = 50)
ks.test(datachick$weight, pnorm)
View(ChickWeight)
pairwise.t.test(datachick$weight, datachick$Diet, p.adjust.method = "bonferroni")
newdataex3
colfunc <- colorRampPalette(c("green", "orange"))
boxcolors <- colfunc(4)
boxplot(datachick$weight ~ datachick$Diet, data = datachick,
main="Chicken weight by diet",
ylab="weight",
xlab="Diet",
col=boxcolors)
colfunc <- colorRampPalette(c("blue", "red"))
boxcolors <- colfunc(4)
boxplot(datachick$weight ~ datachick$Diet, data = datachick,
main="Chicken weight by diet",
ylab="weight",
xlab="Diet",
col=boxcolors)
colcunc(4)
colfunc(4)
colorRampPalette(c("blue","red"))
colorRampPalette(c("blue","red"),4)
colorRampPalette(c("blue","red"),6)
anova(aov(weight ~ Diet, data = datachick))
data("ChickWeight")
head(ChickWeight)
View(ChickWeight)
install.packages("MASS")
require(MASS)
data("cats")
head(cats)
qqplot(cats$Bwt~cats$Hwt)
qqplot(cats)
qqplot(cats$Bwt)
qqplot(x = cats$Bwt, y = cats$Hwt)
plot(x = cats$Bwt, y = cats$Hwt)
plot(x = cats$Bwt,
y = cats$Hwt,
ylab = "Hearth weight",
xlab = "Body weight")
plot(x = cats$Bwt,
y = cats$Hwt,
ylab = "Hearth weight",
xlab = "Body weight")
cor(x = cats$Bwt,
y = cats$Hwt)
plot(x = cats$Bwt,
y = cats$Hwt,
ylab = "Hearth weight",
xlab = "Body weight")
cor.test(x = cats$Bwt,
y = cats$Hwt)
plot(x = cats$Bwt,
y = cats$Hwt,
ylab = "Hearth weight",
xlab = "Body weight")
abline(lm(cats$Bwt ~ cats$Hwt))
cor.test(x = cats$Bwt,
y = cats$Hwt)
plot(x = cats$Bwt,
y = cats$Hwt,
ylab = "Hearth weight",
xlab = "Body weight")
abline(lm(cats$Bwt ~ cats$Hwt))
cor.test(x = cats$Bwt,
y = cats$Hwt)
abline(lm(cats$Bwt ~ cats$Hwt))
abline(lm(cats$Bwt ~ cats$Hwt))
plot(x = cats$Bwt,
y = cats$Hwt,
ylab = "Hearth weight",
xlab = "Body weight")
abline(lm(cats$Bwt ~ cats$Hwt))
plot(x = cats$Bwt,
ylab = "Hearth weight",
xlab = "Body weight")
abline(lm(cats$Bwt ~ cats$Hwt))
plot(x = cats$Bwt,
y = cats$Hwt,
ylab = "Hearth weight",
xlab = "Body weight")
abline(lm(cats$Bwt ~ cats$Hwt))
cor.test(x = cats$Bwt,
y = cats$Hwt)
plot(x = cats$Bwt,
y = cats$Hwt,
ylab = "Hearth weight",
xlab = "Body weight")
plot(x = cats$Bwt,
y = cats$Hwt,
ylab = "Hearth weight",
xlab = "Body weight")
abline(lm(cats$Hwt ~ cats$Bwt))
lm(cats$Hwt ~ cats$Bwt)
cats.lm <- lm(cats$Hwt ~ cats$Bwt)
cats.lm
cats.lm$coefficients
cats.lm$coefficients[1]
cats.lm$coefficients[1]*6
cats.lm$coefficients[1]
intercept*2.85 + slope
cats.lm <- lm(cats$Hwt ~ cats$Bwt)
cats.lm
intercept <- cats.lm$coefficients[1]
slope <- cats.lm$coefficients[2]
intercept*2.85 + slope
cats.lm$coefficients[1]
levels(cats.lm$coefficients[1])
intercept*1.5 + slope
(cats.lm$coefficients[1])[1]
(cats.lm$coefficients[1])[2]
intercept*2.85 + slope
Fisher.test(x = dataex3)
fisher.test(x = dataex3)
fisher.test(newdataex3)
plot(x = cats$Bwt,
y = cats$Hwt,
ylab = "Hearth weight",
xlab = "Body weight",
xlim = c(0,4),
main = "Comparison between cat body and hearth weight")
abline(lm(cats$Hwt ~ cats$Bwt))
plot(x = cats$Bwt,
y = cats$Hwt,
xlab = "Body weight",
y = cats$Hwt,
ylab = "Hearth weight",
xlim = c(0,4),
main = "Comparison between cat body and hearth weight")
cats.lm <- lm(cats$Hwt ~ cats$Bwt)
cats.lm
intercept <- (cats.lm$coefficients[1])
slope <- cats.lm$coefficients[2]
intercept
slope*2.85 + intercept
slpe*1.5 + intercept
slope*1.5 + intercept
plot(x = cats$Bwt,
y = cats$Hwt,
ylab = "Hearth weight",
xlab = "Body weight",
main = "Comparison between cat body and hearth weight")
cats$Bwt
source("https://bioconductor.org/biocLite.R")
biocLite()
quit()
exit()
q()
BiocLite()
biocLite()
library("BioInstaller")
library(BioInstaller)
library(BiocInstaller)
BiocLite(c("edgeR","geneplotter))
""
"
BiocLite(c("edgeR","geneplotter"))
biocLite(c("edgeR","geneplotter"))
biocLite(c("annotate","geneplotter"))
biocLite(c("XML",annotate","geneplotter"))
biocLite(c("XML","annotate","geneplotter"))
biocLite(c(annotate","geneplotter"))
biocLite(c("annotate","geneplotter"))
library(SummarizedExperiment)
lclse <- readRDS("pickrell2010.rds")
setwd("~/master_bioinfo/ieo")
lclse <- readRDS("pickrell2010.rds")
asays(lclse)
assays(lclse)
assays(lclse)$coutns
assays(lclse)$counts
as.data.frame(rowData(lclse))
#To load data
lclse <- readRDS("./pickrell2010.rds")
dge <- DGEList(counts = assays(lclse)$counts, genes = as.data.frame(rowData(lclse)))
dge <- DGEList(counts = assays(lclse)$counts, genes = as.data.frame(rowData(lclse)))
require("edgeR")
dge <- DGEList(counts = assays(lclse)$counts, genes = as.data.frame(rowData(lclse)))
#To load data
lclse <- readRDS("./pickrell2010.rds")
dge <- DGEList(counts = assays(lclse)$counts, genes = as.data.frame(rowData(lclse)))
ord <- order(dge$sample$lib.size)
barplot(dge$sample$lib.size[ord]/1e+06, las = 1, ylab = "Millions of reads", xlab = "Samples",
col = c("red", "blue")[lclse$sex[ord]])
legend("topleft", c("female", "male"), fill = c("red", "blue"), inset = 0.01)
#To load data
lclse <- readRDS("./pickrell2010.rds")
dge <- DGEList(counts = assays(lclse)$counts, genes = as.data.frame(rowData(lclse)))
ord <- order(dge$sample$lib.size)
barplot(dge$sample$lib.size[ord]/1e+06, las = 1, ylab = "Millions of reads", xlab = "Samples",
col = ifelse(lclse$sex == "female","red", "blue"))
legend("topleft", c("female", "male"), fill = c("red", "blue"), inset = 0.01)
CPM <- t(t(dge$counts)/(dge$samples$lib.size/1e+06))
assays(lclse)$logCPM <- cpm(dge, log = TRUE, prior.count = 0.25)
assays(lclse)$logCPM <- cpm(dge, log = TRUE, prior.count = 0.25)
assays(lclse)$logCPM[1:3, 1:7]
library(SummarizedExperiment)
library(ggplot2)
library(edgeR)
se <- readRDS( "seLUAD.rds")
se
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(mcols(se)), group = se$type)
setwd("~/master_bioinfo/ieo/project")
se <- readRDS( "seLUAD.rds")
se
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(mcols(se)), group = se$type)
CPM <- t(t(dge_luad$counts)/(dge_luad$samples$lib.size/1e+06))
assays(se)$logCPM <- cpm(dge_luad, log = TRUE, prior.count = 0.25)
assays(se)$logCPM[1:3, 1:7]
library(geneplotter)
avgexp <- rowMeans(assays(se)$logCPM)
hist(avgexp, xlab = expression(log[2] * "CPM"), main = "", las = 1, col = "gray")
cpmcutoff <- round(10/min(dge_luad$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge_luad) > cpmcutoff) >= nsamplescutoff
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
h <- hist(avgexp, xlab = expression("Expression level (" * log[2] * "CPM)"), main = "",
las = 1, col = "grey", cex.axis = 1.2, cex.lab = 1.5)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks = h$breaks)
lines(h$mids, table(x), type = "h", lwd = 10, lend = 1, col = "darkred")
legend("topright", c("All genes", "Filtered genes"), fill = c("grey", "darkred"))
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
mask <- rowMeans(assays(se)$logCPM) > 1
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
dge.filt <- calcNormFactors(dge.filt, normalize.method="quantile")
par(mfrow = c(1, 2))
plotSmear(dge_luad, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
plotSmear(dge_luad.filt, lowess = TRUE, las = 1, cex.lab = 1.5, cex.axis = 1.2)
abline(h = 0, col = "blue", lwd = 2)
par(mfrow=c(1, 2), mar=c(4, 5, 3, 1))
for (i in 1:2) {
A <- rowMeans(assays(lclse.filt)$logCPM) ; M <- assays(lclse.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(lclse.filt)[i], las=1, cex.axis=1.2, cex.lab=1.5, cex.main=2)
abline(h=0, col="blue", lwd=2) ; lo <- lowess(M ~ A) ; lines(lo$x, lo$y, col="red", lwd=2)
}
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7)
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7)
legend("topleft", c("Normal", "Tumor"), fill = c("red", "blue"), inset = 0.05, cex = 0.7)
par(mfrow = c(1,1))
par(mar=c(1,1))
par(mar=c(1,1,1,1))
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7)
par(mar = c(0,0,0,0))
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7)
legend("topleft", c("Normal", "Tumor"), fill = c("red", "blue"), inset = 0.05, cex = 0.7)
par(mar = c(1,1,1,1))
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7)
legend("topleft", c("Normal", "Tumor"), fill = c("red", "blue"), inset = 0.05, cex = 0.7)
par(mar = c(5.1,4.1,4.1,2.1))
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7)
maskbad <- colnames(lclse) %in% c("TCGA.64.5775.01A.01R.1628.07", "TCGA.49.AAR9.01A.21R.A41B.07")
maskbad <- colnames(lclse) %in% c("TCGA.64.5775.01A.01R.1628.07", "TCGA.49.AAR9.01A.21R.A41B.07")
maskbad <- colnames(lclse) %in% c("TCGA.64.5775.01A.01R.1628.07", "TCGA.49.AAR9.01A.21R.A41B.07")
lclse.filt <- lclse.filt[, !maskbad]
dge.filt <- dge.filt[, !maskbad]
maskbad
colnames(lclse)
maskbad <- colnames(dge) %in% c("TCGA.64.5775.01A.01R.1628.07", "TCGA.49.AAR9.01A.21R.A41B.07")
se.filt <- se.filt[, !maskbad]
dge_luad.filt <- dge_luad.filt[, !maskbad]
maskbad
maskbad <- colnames(dge_luad) %in% c("TCGA.64.5775.01A.01R.1628.07", "TCGA.49.AAR9.01A.21R.A41B.07")
maskbad
colnames(dge_luad)
colnames(dge_luad)=="TCGA.49.AAR9.01A.21R.A41B.07"
colnames(dge_luad)=="TCGA.49.AAR9.01A.21R.A41B.07"
colnames(dge_luad)=="TCGA.64.5775.01A.01R.1628.07"
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7)
library(SummarizedExperiment)
lclse <- readRDS("pickrell2010.rds")
maskbad <- colnames(dge_luad) %in% c("TCGA.64.5775.01A.01R.1628.07", "TCGA.49.AAR9.01A.21R.A41B.07")
se.filt <- se.filt[, !maskbad]
dge_luad.filt <- dge_luad.filt[, !maskbad]
dge_luad.filt
colnames(dge_luad.filt)
colnames(dge_luad.filt)[colnames(dge_luad.filt) == "TCGA.64.5775.01A.01R.1628.07"]
colnames(dge_luad.filt)[colnames(dge_luad.filt) == "TCGA.55.6978.11A.01R.1949.07"]
plotMDS(dge_luad.filt, col = c("red", "blue")[as.integer(dge_luad.filt$samples$group)], cex = 0.7)
fc <- paste0(substr(lclse$flow_cell, 1, 6), substr(lclse$flow_cell, 18, 19))
table(data.frame(GENDER = lclse$gender, FLOWCELL = fc))
table(data.frame(GENDER = lclse$gender, LANE = lclse$lane))
table(data.frame(GENDER = lclse$gender, CONCENTRATION = lclse$concentration))
table(data.frame(GENDER = lclse$gender, FLOWCELL = fc))
table(data.frame(GENDER = lclse$gender, LANE = lclse$lane))
table(data.frame(GENDER = lclse$gender, CONCENTRATION = lclse$concentration))
logCPM <- cpm(dge, log = TRUE, prior.count = 3)
d <- as.dist(1 - cor(logCPM, method = "spearman"))
d <- as.dist(1 - cor(logCPM, method = "spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(lclse$concentration)
sampleDendrogram <- as.dendrogram(sampleClustering, hang = 0.1)
names(batch) <- colnames(lclse)
outcome <- as.character(lclse$gender)
names(outcome) <- colnames(lclse)
sampleDendrogram <- dendrapply(sampleDendrogram, function(x, batch, labels) {
## for every node in the dendrogram if it is a leaf node
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col = as.vector(batch[attr(x, "label")]))  ## color by batch
attr(x, "label") <- as.vector(labels[attr(x, "label")])  ## label by outcome
}
x
}, batch, outcome)  ## these are the second and third arguments in the function
#Plot the created dendogram
plot(sampleDendrogram, main = "Hierarchical clustering of samples")
legend("topright", paste("Batch", sort(unique(batch))), fill = sort(unique(batch)))
