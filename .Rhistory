#Plot the created dendogram
plot(sampleDendrogram, main = "Hierarchical clustering of samples")
legend("topright", paste("Batch", sort(unique(batch))), fill = sort(unique(batch)))
lclse.row
rowData(lclse)
colData(lclse)
require(edgeR)
plotMDS(dge, labels = lclse$gender, col = batch)
legend("bottomleft", paste("Batch", unique(batch)), fill = unique(batch), inset = 0.01)
library(sva)
mod <- model.matrix(~sex + concentration, data = colData(lclse))
require(SummarizedExperiment)
require(edgeR)
mod <- model.matrix(~sex + concentration, data = colData(lclse))
head(mod)
mod <- model.matrix(~genders + concentration, data = colData(lclse))
mod <- model.matrix(~gender + concentration, data = colData(lclse))
head(mod)
mod
mod0 <- model.matrix(~concentration, data = colData(lclse))
mod0
mod0 <- model.matrix(~concentration, data = colData(lclse))
head(mod0)
sv <- sva(logCPM, mod, mod0)
names(sv)
pValues <- f.pvalue(logCPM, mod, mod0)
sum(p.adjust(pValues, method = "BH") < 0.05)
hist(pValues, main = "", las = 1)
modSv <- cbind(mod, sv$sv)
mod0Sv <- cbind(mod0, sv$sv)
pValuesSv <- f.pvalue(logCPM, modSv, mod0Sv)
sum(p.adjust(pValuesSv, method = "BH") < 0.05)
modSv <- cbind(mod, sv$sv)
mod0Sv <- cbind(mod0, sv$sv)
pValuesSv <- f.pvalue(logCPM, modSv, mod0Sv)
sum(p.adjust(pValuesSv, method = "BH") < 0.05)
hist(pValuesSv, main = "", las = 1)
plot(tab$logFC, -log10(tab$Pvalue), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
abline(h=-log10(max(tab$Pvalue[tab$FDRpvalue <= 0.05])), lty=2)
modSv <- cbind(mod, sv$sv)
mod0Sv <- cbind(mod0, sv$sv)
pValuesSv <- f.pvalue(logCPM, modSv, mod0Sv)
sum(p.adjust(pValuesSv, method = "BH") < 0.05)
hist(pValuesSv, main = "", las = 1)
modSv <- cbind(mod, sv$sv)
mod0Sv <- cbind(mod0, sv$sv)
pValuesSv <- f.pvalue(logCPM, modSv, mod0Sv)
sum(p.adjust(pValuesSv, method = "BH") < 0.05)
hist(pValuesSv, main = "", las = 1)
hist(pValuesSv, main = "", las = 1)
require(sva)
mod <- model.matrix(~gender, colData(lclse))
combatexp <- ComBat(logCPM, batch, mod)
class(combatexp)
dim(combatexp)
d <- as.dist(1 - cor(combatexp, method = "spearman"))
sampleClustering <- hclust(d)
sampleDendrogram <- as.dendrogram(sampleClustering, hang = 0.1)
names(batch) <- colnames(lclse)
outcome <- as.character(lclse$gender)
names(outcome) <- colnames(lclse)
sampleDendrogram <- dendrapply(sampleDendrogram, function(x, batch, labels) {
## for every node in the dendrogram if it is a leaf node
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col = as.vector(batch[attr(x, "label")]))  ## color by batch
attr(x, "label") <- as.vector(labels[attr(x, "label")])  ## label by outcome
}
x
}, batch, outcome)  ## these are the second and third arguments in the function
plot(sampleDendrogram, main = "Hierarchical clustering of samples")
legend("topright", paste("Batch", sort(unique(batch))), fill = sort(unique(batch)))
library(limma)
qrexp <- removeBatchEffect(logCPM, batch, design = mod)
class(qrexp)
dim(qrexp)
d <- as.dist(1 - cor(qrexp, method = "spearman"))
sampleClustering <- hclust(d)
sampleDendrogram <- as.dendrogram(sampleClustering, hang = 0.1)
names(batch) <- colnames(lclse)
outcome <- as.character(lclse$sex)
names(outcome) <- colnames(lclse)
d <- as.dist(1 - cor(qrexp, method = "spearman"))
sampleClustering <- hclust(d)
sampleDendrogram <- as.dendrogram(sampleClustering, hang = 0.1)
names(batch) <- colnames(lclse)
outcome <- as.character(lclse$gender)
names(outcome) <- colnames(lclse)
sampleDendrogram <- dendrapply(sampleDendrogram, function(x, batch, labels) {
## for every node in the dendrogram if it is a leaf node
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col = as.vector(batch[attr(x, "label")]))  ## color by batch
attr(x, "label") <- as.vector(labels[attr(x, "label")])  ## label by outcome
}
x
}, batch, outcome)  ## these are the second and third arguments in the function
d <- as.dist(1 - cor(qrexp, method = "spearman"))
sampleClustering <- hclust(d)
sampleDendrogram <- as.dendrogram(sampleClustering, hang = 0.1)
names(batch) <- colnames(lclse)
outcome <- as.character(lclse$gender)
names(outcome) <- colnames(lclse)
sampleDendrogram <- dendrapply(sampleDendrogram, function(x, batch, labels) {
## for every node in the dendrogram if it is a leaf node
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col = as.vector(batch[attr(x, "label")]))  ## color by batch
attr(x, "label") <- as.vector(labels[attr(x, "label")])  ## label by outcome
}
x
}, batch, outcome)  ## these are the second and third arguments in the function
plot(sampleDendrogram, main = "Hierarchical clustering of samples")
legend("topright", paste("Batch", sort(unique(batch))), fill = sort(unique(batch)))
library(corpcor)
install.packages("corpcor")
library(corpcor)
s <- fast.svd(t(scale(t(logCPM), center = TRUE, scale = TRUE)))
s
pcSds <- s$d
pcSds[1] <- 0
svdexp <- s$u %*% diag(pcSds) %*% t(s$v)
colnames(svdexp) <- colnames(lclse)
class(svdexp)
dim(svdexp)
d <- as.dist(1 - cor(svdexp, method = "spearman"))
sampleClustering <- hclust(d)
sampleDendrogram <- as.dendrogram(sampleClustering, hang = 0.1)
names(batch) <- colnames(lclse)
outcome <- as.character(lclse$sex)
names(outcome) <- colnames(lclse)
d <- as.dist(1 - cor(svdexp, method = "spearman"))
sampleClustering <- hclust(d)
sampleDendrogram <- as.dendrogram(sampleClustering, hang = 0.1)
names(batch) <- colnames(lclse)
outcome <- as.character(lclse$gender)
names(outcome) <- colnames(lclse)
sampleDendrogram <- dendrapply(sampleDendrogram, function(x, batch, labels) {
## for every node in the dendrogram if it is a leaf node
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col = as.vector(batch[attr(x, "label")]))  ## color by batch
attr(x, "label") <- as.vector(labels[attr(x, "label")])  ## label by outcome
}
x
}, batch, outcome)  ## these are the second and third arguments in the function
plot(sampleDendrogram, main = "Hierarchical clustering of samples")
legend("topright", paste("Batch", sort(unique(batch))), fill = sort(unique(batch)))
library(SummarizedExperiment)
lclse <- readRDS("pickrell2010.rds")
#ChargeDGE list and normalization factor
library(edgeR)
dge <- DGEList(counts = assays(lclse)$counts, group = lclse$gender, genes = as.data.frame(rowData(lclse)))
dge <- calcNormFactors(dge)
logCPM <- cpm(dge, log = TRUE, prior.count = 0.25)
table(lclse$gender, lclse$concentration)
table(lclse$gender, sub("_HGAC_S1000", "", lclse$flow_cell))
table(lclse$gender, lclse$lane)
meanUnloggedExp <- rowMeans(assays(lclse)$count)
sdUnloggedExp <- apply(assays(lclse)$counts, 1, sd)#apply on rows (1) of the matrix assays(lclse) the function sd
meanLoggedExp <- rowMeans(logCPM)
sdLoggedExp <- apply(logCPM, 1, sd)
par(mfrow=c(1, 2))
plot(meanUnloggedExp, sdUnloggedExp, pch=".", cex=4, xlab="Unlogged mean expression", ylab="SD")
lines(lowess(meanUnloggedExp, sdUnloggedExp), lwd=2, col="red")
plot(meanLoggedExp, sdLoggedExp, pch=".", cex=4, xlab="Logged mean expression", ylab="SD")
lines(lowess(meanLoggedExp, sdLoggedExp, f=0.25), lwd=2, col="red")
head(lclse$gender, n = 8)
logCPM[1:4, 1:6]
maleExp <- logCPM[1, lclse$gender == "male"]
femaleExp <- logCPM[1, lclse$gender == "female"]
mean(maleExp)
mean(femaleExp)
logFC <- mean(maleExp) - mean(femaleExp)
logFC
2^logFC
maleExp <- rowMeans(logCPM[, lclse$gender == "male"])
femaleExp <- rowMeans(logCPM[, lclse$gender == "female"])
par(mfrow = c(1, 2))
plot(maleExp, femaleExp, xlab = "Male", ylab = "Female", pch = ".", cex = 4, las = 1)
plot((femaleExp + maleExp)/2, femaleExp - maleExp, pch = ".", cex = 4, las = 1)
log2fc <- femaleExp - maleExp
ranking <- order(abs(log2fc), decreasing = TRUE)
head(data.frame(Log2FC = round(log2fc[ranking], digits = 3), FC = round(2^log2fc[ranking],
digits = 3), `1/FC` = round(2^(-log2fc[ranking]), digits = 3), row.names = rowData(lclse)$symbol[ranking],
check.names = FALSE), n = 10)
plot(tab$logFC, -log10(tab$Pvalue), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
titles_batchs <- c("MDS plot: Tisue Source Site",
"MDS plot: Plate",
"MDS plot: Sex",
"MDS plot: Ethnicity",
"MDS plot: Histology")
names_batchs <- c("MDS_tss.png",
"MDS_plate.png",
"MDS_sex.png",
"MDS_ethnicity.png",
"MDS_histology.png")
objects_batchs <- list(tss, plate, gender,race, histo)
outcome <- paste(substr(colnames(se.filt), 9, 12), as.character(se.filt$type), sep="-")
for (a in 1:5){
png(filename = paste("img/", names_batchs[a], sep = ""), width = 1100, height = 700)
par(mfrow=c(1,1))
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(objects_batchs[[a]]))
plotMDS(dge_luad.filt, labels=outcome, col=batch, main =titles_batchs[a])
legend("bottomright", levels(objects_batchs[[a]]),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
dev.off()
}
setwd("~/master_bioinfo/ieo/project")
library(SummarizedExperiment)
library(edgeR)
library(ggplot2)
library(plyr)
library(sva)
library(grid)
library(geneplotter)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
se <- readRDS( "seLUAD.rds")
dge_luad <- DGEList(counts = assays(se)$counts, genes = as.data.frame(mcols(se)), group = se$type)
CPM <- t(t(dge_luad$counts)/(dge_luad$samples$lib.size/1e+06))
assays(se)$logCPM <- cpm(dge_luad, log = TRUE, prior.count = 0.25)
assays(se)$logCPM[1:3, 1:7]
ord <- order(dge_luad$sample$lib.size)
i <- 0
ordsliced <- list(0)
gender <- list(0)
race <- list(0)
typ <- list(0)
hstory_malignancy <- list(0)
for(num in 1:6){
ordsliced[[num]] <- c(ord[(i*100 +1):(num*100)])
i <- num
g_nas <- length(colData(se)$gender[ordsliced[[num]]][colData(se)$gender[ordsliced[[num]]] == "NA"])
gender[[num]] <- c(length(colData(se)$gender[ordsliced[[num]]][colData(se)$gender[ordsliced[[num]]] == "MALE"])-g_nas,
length(colData(se)$gender[ordsliced[[num]]][colData(se)$gender[ordsliced[[num]]] == "FEMALE"])-g_nas, g_nas)
race_nas <- length(colData(se)$race[ordsliced[[num]]][colData(se)$race[ordsliced[[num]]] == "NA"])
race_tnas <- length(colData(se)$race[ordsliced[[num]]][colData(se)$race[ordsliced[[num]]] == "[Not Available]"]) +
length(colData(se)$race[ordsliced[[num]]][colData(se)$race[ordsliced[[num]]] == "[Not Evaluated]"]) +
length(colData(se)$race[ordsliced[[num]]][colData(se)$race[ordsliced[[num]]] == "[Unknown]"]) -2*race_nas
race[[num]] <- c(length(colData(se)$race[ordsliced[[num]]][colData(se)$race[ordsliced[[num]]] == "AMERICAN INDIAN OR ALASKAN NATIVE"]) - race_nas,
length(colData(se)$race[ordsliced[[num]]][colData(se)$race[ordsliced[[num]]] == "ASIAN"]) - race_nas,
length(colData(se)$race[ordsliced[[num]]][colData(se)$race[ordsliced[[num]]] == "BLACK OR AFRICAN AMERICAN"]) - race_nas,
length(colData(se)$race[ordsliced[[num]]][colData(se)$race[ordsliced[[num]]] == "WHITE"]) - race_nas,
race_tnas)
hist_nas <- length(colData(se)$history_other_malignancy[ordsliced[[num]]][colData(se)$history_other_malignancy[ordsliced[[num]]] == "NA"])
hstory_malignancy[[num]] <- c(length(colData(se)$history_other_malignancy[ordsliced[[num]]][colData(se)$history_other_malignancy[ordsliced[[num]]] == "Yes"]) - hist_nas +
length(colData(se)$history_other_malignancy[ordsliced[[num]]][colData(se)$history_other_malignancy[ordsliced[[num]]] == "Yes, History of Prior Malignancy"]) - hist_nas +
length(colData(se)$history_other_malignancy[ordsliced[[num]]][colData(se)$history_other_malignancy[ordsliced[[num]]] == "Yes, History of Synchronous and or Bilateral Malignancy"]) - hist_nas,
length(colData(se)$history_other_malignancy[ordsliced[[num]]][colData(se)$history_other_malignancy[ordsliced[[num]]] == "No"]) - hist_nas,
hist_nas)
typ_na <- length(colData(se)$type[ordsliced[[num]]][colData(se)$type[ordsliced[[num]]] == "NA"])
typ[[num]] <- c(length(colData(se)$type[ordsliced[[num]]][colData(se)$type[ordsliced[[num]]] == "normal"]) - typ_na,
length(colData(se)$type[ordsliced[[num]]][colData(se)$type[ordsliced[[num]]] == "tumor"]) - typ_na,
typ_na)
}
g_df <- data.frame(supp=c("MALE", "FEMALE", "NA"),
depth=rep(c('1st', '2nd', '3rd', '4th', '5th', '6th'),each = 3),
freq = c(gender[[1]],gender[[2]],gender[[3]],
gender[[4]], gender[[5]],gender[[6]]))
df_sorted <- arrange(g_df, depth, supp)
df_cumsum <- ddply(df_sorted, "depth",transform, label_ypos=cumsum(freq))
p1 <- ggplot( data=df_cumsum, aes(x=depth, y=freq, fill=supp)) +
geom_bar(stat="identity") +
geom_text(aes(y=107.5-label_ypos,label=freq), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5) +
theme_minimal() + ggtitle("Barplot Gender depth distribution") +
theme(plot.title = element_text(hjust = 0.5))
r_df <- data.frame(supp = c("A. NATIVE", "ASIAN","BLACK", "WHITE", "NA"),
depth=rep(c('1st', '2nd', '3rd', '4th', '5th', '6th'),each = 5),
freq = c(race[[1]],race[[2]],race[[3]], race[[4]], race[[5]],race[[6]]))
df_sorted <- arrange(r_df, depth, supp)
df_cumsum <- ddply(df_sorted, "depth",transform, label_ypos=cumsum(freq))
p2 <-ggplot( data=df_cumsum, aes(x=depth, y=freq, fill=supp)) +
geom_bar(stat="identity") +
geom_text(aes(y=107.5-label_ypos,label=freq), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5) +
theme_minimal() + ggtitle("Barplot Race depth distribution") +
theme(plot.title = element_text(hjust = 0.5))
h_df <- data.frame(supp = c("Yes", "No", "NA"),
depth=rep(c('1st', '2nd', '3rd', '4th', '5th', '6th'),each = 3),
freq = c(hstory_malignancy[[1]],hstory_malignancy[[2]],hstory_malignancy[[3]], hstory_malignancy[[4]], hstory_malignancy[[5]],hstory_malignancy[[6]]))
df_sorted <- arrange(h_df, depth, supp)
df_cumsum <- ddply(df_sorted, "depth",transform, label_ypos=cumsum(freq))
p3 <- ggplot( data=df_cumsum, aes(x=depth, y=freq, fill=supp)) +
geom_bar(stat="identity") +
geom_text(aes(y=107.5-label_ypos,label=freq), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5) +
theme_minimal() + ggtitle("Barplot history of other malignancy depth distribution") +
theme(plot.title = element_text(hjust = 0.5))
t_df <- data.frame(supp = c("Normal", "Tumor", "NA"),
depth=rep(c('1st', '2nd', '3rd', '4th', '5th', '6th'),each = 3),
freq = c(typ[[1]],typ[[2]],typ[[3]], typ[[4]], typ[[5]],typ[[6]]))
df_sorted <- arrange(t_df, depth, supp)
df_cumsum <- ddply(df_sorted, "depth",transform, label_ypos=cumsum(freq))
p4 <-ggplot( data=df_cumsum, aes(x=depth, y=freq, fill=supp)) +
geom_bar(stat="identity") +
geom_text(aes(y=107.5-label_ypos,label=freq), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5) +
theme_minimal() + ggtitle("Barplot of type depth distribution") +
theme(plot.title = element_text(hjust = 0.5))
multiplot(p1, p2, p3, p4, cols=2)
avgexp <- rowMeans(assays(se)$logCPM)
par(mfrow=c(1,1))
hist(avgexp, xlab = expression(log[2] * "CPM"), main = "", las = 1, col = "gray")
cpmcutoff <- round(10/min(dge_luad$sample$lib.size/1e+06), digits = 1)
cpmcutoff
nsamplescutoff <- min(table(se$type))
nsamplescutoff
mask <- rowSums(cpm(dge_luad) > cpmcutoff) >= nsamplescutoff
se.filt <- se[mask, ]
dge_luad.filt <- dge_luad[mask, ]
dim(se.filt)
maskbad <- colnames(dge_luad) %in% c("TCGA.64.5775.01A.01R.1628.07")
se.filt <- se.filt[, !maskbad]
dge_luad.filt <- dge_luad.filt[, !maskbad]
tss <- substr(colnames(se.filt), 6, 7)
table(tss)
center <- substr(colnames(se.filt), 27, 28)
table(center)
plate <- substr(colnames(se.filt), 22, 25)
table(plate)
portionanalyte <- substr(colnames(se.filt), 18, 20)
table(portionanalyte)
samplevial <- substr(colnames(se.filt), 14, 16)
table(samplevial)
gender <- unname(se.filt$gender)
race <- unname(se.filt$race)
histo <- unname(se.filt$histologic_diagnosis.1)
table(data.frame(TYPE=se.filt$type, TSS=tss))
table(data.frame(TYPE=se.filt$type, PLATE=plate))
table(data.frame(TYPE=se.filt$type, PORTIONALYTE=portionanalyte))
table(data.frame(TYPE=se.filt$type, GENDER=gender))
table(data.frame(TYPE=se.filt$type, RACE=race))
titles_batchs <- c("MDS plot: Tisue Source Site",
"MDS plot: Plate",
"MDS plot: Sex",
"MDS plot: Ethnicity",
"MDS plot: Histology")
names_batchs <- c("MDS_tss.png",
"MDS_plate.png",
"MDS_sex.png",
"MDS_ethnicity.png",
"MDS_histology.png")
objects_batchs <- list(tss, plate, gender,race, histo)
outcome <- paste(substr(colnames(se.filt), 9, 12), as.character(se.filt$type), sep="-")
for (a in 1:5){
png(filename = paste("img/", names_batchs[a], sep = ""), width = 1100, height = 700)
par(mfrow=c(1,1))
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(objects_batchs[[a]]))
plotMDS(dge_luad.filt, labels=outcome, col=batch, main =titles_batchs[a])
legend("bottomright", levels(objects_batchs[[a]]),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
dev.off()
}
par(mfrow=c(1,1))
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(objects_batchs[[a]]))
plotMDS(dge_luad.filt, labels=outcome, col=batch, main =titles_batchs[a])
legend("bottomright", levels(objects_batchs[[a]]),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
plotMDS(dge_luad.filt, labels=outcome, col=batch, main =titles_batchs[a])
legend("bottomright", levels(objects_batchs[[a]]),fill=sort(unique(batch)), inset=0.05, cex = 0.7)
plotMDS(dge_luad.filt, labels=outcome, col=batch, main =titles_batchs[a])
dev.off()
plotMDS(dge_luad.filt, labels=outcome, col=batch, main =titles_batchs[a])
legend("bottomright", levels(objects_batchs[[a]]),fill=sort(unique(batch)), inset=0.05, cex = 0.7)
dev.off()
dev.off()
dev.off()
plotMDS(dge_luad.filt, labels=outcome, col=batch, main =titles_batchs[a])
legend("bottomright", levels(objects_batchs[[a]]),fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", levels(objects_batchs[[a]]),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", levels(objects_batchs[[a]]),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", legend=levels(objects_batchs[[a]]),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", levels(objects_batchs[[a]]),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
levels(objects_batchs[[a]]),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
levels(objects_batchs[[a]])
objects_batchs
a
objects_batchs[[1]]
levels(objects_batchs[[1]])
sort(unique(batch))
legend("bottomright", objects_batchs[[a]],
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", sort(unique(objects_batchs[[a]])),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", paste("Batch", sort(unique(batch)), levels(factor(a))),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", sort(unique(objects_batchs[[a]])),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright",levels(objects_batchs[[a]]),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
sort(unique(batch))
levels(factor(a))
legend("bottomright",sort(unique(batch)),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright",sort(unique(batch)),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright",legend=sort(unique(batch)),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", paste("Batch", sort(unique(batch)), levels(factor(a))),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
levels(factor(a))
a
a
batch
tss
levels(tss)
objects_batchs[[a]]
factor(objects_batchs[[a]])
as.integer(factor(objects_batchs[[a]]))
legend("bottomright",legend=sort(unique(batch)),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
batch <- factor(objects_batchs[[a]])
legend("bottomright",legend=sort(unique(batch)),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright",legend=sort(unique(batch)),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
paste("Batch",
legend("bottomright", paste("Batch", sort(unique(batch)), levels(factor(a))),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", paste("Batch", sort(unique(batch)), levels(factor(a))),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", paste("Batch", sort(unique(batch)), levels(factor(a))),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", ort(unique(batch))),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", sort(unique(batch))),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", sort(unique(batch))),fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", sort(unique(batch))), fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", sort(unique(batch)), fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", legend=sort(unique(batch)), fill=sort(unique(batch)), inset=0.05, cex = 0.7)
legend("bottomright", legend=sort(unique(batch)),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
titles_batchs <- c("MDS plot: Tisue Source Site",
"MDS plot: Plate",
"MDS plot: Sex",
"MDS plot: Ethnicity",
"MDS plot: Histology")
names_batchs <- c("MDS_tss.png",
"MDS_plate.png",
"MDS_sex.png",
"MDS_ethnicity.png",
"MDS_histology.png")
objects_batchs <- list(tss, plate, gender,race, histo)
outcome <- paste(substr(colnames(se.filt), 9, 12), as.character(se.filt$type), sep="-")
for (a in 1:5){
png(filename = paste("img/", names_batchs[a], sep = ""), width = 1100, height = 700)
par(mfrow=c(1,1))
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- factor(objects_batchs[[a]])
plotMDS(dge_luad.filt, labels=outcome, col=batch, main =titles_batchs[a])
legend("bottomright", legend=sort(unique(batch)),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
dev.off()
}
dev.off()
dev.off()
dev.off()
plotMDS(dge_luad.filt, labels=outcome, col=batch, main =titles_batchs[a])
legend("bottomright", legend=sort(unique(batch)),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
for (a in 1:5){
png(filename = paste("img/", names_batchs[a], sep = ""), width = 1100, height = 700)
par(mfrow=c(1,1))
logCPM <- cpm(dge_luad.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- factor(objects_batchs[[a]])
plotMDS(dge_luad.filt, labels=outcome, col=as.integer(batch), main =titles_batchs[a])
legend("bottomright", legend=sort(unique(batch)),
fill=sort(unique(batch)), inset=0.05, cex = 0.7)
dev.off()
}
